# frozen_string_literal: true

module Analytics
  module CycleAnalytics
    # This class serializes errors from the GroupValueStream models and also includes errors from the stages relation.
    #
    # Reason: The GroupValueStream model uses accepts_nested_attributes_for receiving stages (has many) and the error object
    # generated by active record is incorrect (using the index_errors option)
    #
    # This custom serializer was introduced to give enough information to the frontend to map the errors to the respective
    # form fields.
    #
    # Issue: https://github.com/rails/rails/issues/24390
    #
    # Example error object:
    #
    # {
    #   name: ["can't be blank"],
    #   stages: [
    #     {
    #       id: nil,
    #       name: "",
    #       errors: {
    #         name: ["can't be blank"]
    #       }
    #     }
    #   ]
    # }
    class ValueStreamErrorsSerializer
      def initialize(value_stream)
        @value_stream = value_stream
      end

      def as_json(options = {})
        # skip all errors related to the associated stages
        errors = value_stream.errors.messages.reject do |attribute, messages|
          attribute.to_s.start_with?("stages.")
        end

        # add all stages errors
        stages_errors = collect_stages_with_errors

        errors[:stages] = stages_errors if stages_errors.any?

        errors
      end

      private

      attr_reader :value_stream

      def collect_stages_with_errors
        value_stream.stages.select(&:invalid?).map do |stage|
          # id and name is enough to identify record on the UI
          {
            id: stage.id,
            name: stage.name,
            errors: stage.errors.messages
          }
        end
      end
    end
  end
end
