# frozen_string_literal: true

module VulnerabilityExports
  class ExportService
    include ::Gitlab::ExclusiveLeaseHelpers

    LEASE_TTL = 1.hour
    LEASE_NAMESPACE = "vulnerability_exports_export"
    EXPORTERS = {
      'csv' => VulnerabilityExports::Exporters::CsvService
    }.freeze
    BATCH_SIZE = 500
    # Remove the below constant and set BATCH_SIZE constant to 1K while enabling the
    # `optimized_vulnerability_report_export` globally and cleaning up the code.
    VULNERABILITY_READS_QUERY_BATCH_SIZE = 1_000

    # This constant determines the number of records to be handled per segmented export.
    VULNERABILITY_READS_PARTIAL_FILE_BATCH_SIZE = 50_000
    SEGMENTED_EXPORT_WORKERS = 5

    def self.export(vulnerability_export)
      new(vulnerability_export).export
    end

    def initialize(vulnerability_export)
      self.vulnerability_export = vulnerability_export
    end

    def export
      in_lock(lease_key, ttl: LEASE_TTL) do
        break unless vulnerability_export.created?

        if should_use_segmented_export?
          enqueue_segmented_export
        else
          generate_export
        end
      end
    end

    def export_segment(part)
      first_record = Vulnerabilities::Read.find(part.start_id)
      last_record = Vulnerabilities::Read.find(part.end_id)

      iterator = group_vulnerability_reads_iterator do |scope|
        scope.in_parent_group_after_and_including(first_record).in_parent_group_before_and_including(last_record)
      end

      enumerator = group_vulnerabilities_enumerator(iterator)
      exporter = exporter(enumerator)

      exporter.generate { |f| part.file = f }
      part.file.filename = segment_filename(part.start_id, part.end_id)
      part.save!
    rescue StandardError
      vulnerability_export.failed!
      schedule_export_deletion
      raise
    end

    def finalise_segmented_export
      tempfile = Tempfile.new

      # The header can be nil for formats like JSONL if we add them later.
      tempfile.puts(export_header) if export_header

      vulnerability_export.export_parts.each do |part|
        part.file.open do |stream|
          first_skip = export_header.present?
          stream.each_line do |line|
            if first_skip
              first_skip = false
              next
            end

            # The encoding of the parts is read as ASCI-8BIT.
            # We need to force the encoding to utf-8 to avoid a write failure due to
            # wide-chars used in place like group names.
            # See:
            # https://github.com/carrierwaveuploader/carrierwave/issues/1583
            # https://gitlab.com/gitlab-org/gitlab/-/blob/0aa846a1baa08b1f6f11b2711f8f6bf880542a46/lib/gitlab/http_io.rb
            tempfile << line.force_encoding(Encoding::UTF_8)
          end
        end
      end

      vulnerability_export.file = tempfile
      vulnerability_export.file.filename = filename
      vulnerability_export.save!
      vulnerability_export.finish!
    rescue StandardError
      vulnerability_export.failed!
      raise
    ensure
      schedule_export_deletion
      tempfile.close!
    end

    private

    attr_accessor :vulnerability_export

    delegate :exportable, :format, to: :vulnerability_export, private: true

    def export_header
      @export_header ||= exporter.header
    end

    def lease_key
      "#{LEASE_NAMESPACE}:#{vulnerability_export.id}"
    end

    def enqueue_segmented_export
      vulnerability_export.start!
      parts = []

      group_vulnerability_reads_iterator.each_batch(of: VULNERABILITY_READS_PARTIAL_FILE_BATCH_SIZE) do |records|
        next if records.empty? # each_batch can return an empty batch

        parts << ::Vulnerabilities::Export::Part.create(
          vulnerability_export_id: vulnerability_export.id,
          start_id: records.first.id,
          end_id: records.last.id,
          organization_id: vulnerability_export.organization_id
        ).id
      end

      segment_count = [parts.length, SEGMENTED_EXPORT_WORKERS].min
      segments = parts.in_groups(segment_count, false)

      segments.each do |segment|
        ::Gitlab::Export::SegmentedExportWorker.perform_async(vulnerability_export.to_global_id, segment)
      end

    rescue StandardError
      vulnerability_export.failed!
      schedule_export_deletion
      raise
    end

    def generate_export
      vulnerability_export.start!
      generate_export_file
      vulnerability_export.finish!
    rescue StandardError
      vulnerability_export.reset_state!
      raise
    ensure
      schedule_export_deletion
    end

    def generate_export_file
      exporter.generate { |f| vulnerability_export.file = f }
      vulnerability_export.file.filename = filename
    end

    def exporter(scope = vulnerabilities)
      @exporter ||= EXPORTERS[format].new(scope)
    end

    def vulnerabilities
      if exportable.is_a?(Group)
        if Feature.enabled?(:optimized_vulnerability_report_export, exportable)
          group_vulnerabilities_enumerator
        else
          in_operator_optimized_enumerator(::Vulnerability.unscoped, {
            in_operator_optimization_options: {
              array_scope: exportable.all_projects.non_archived.select(:id),
              array_mapping_scope: ::Vulnerability.method(:in_optimization_array_mapping_scope)
            }
          })
        end
      else
        Security::VulnerabilitiesFinder.new(exportable).execute.with_findings_scanner_identifiers_and_notes
      end
    end

    def in_operator_optimized_enumerator(scope, opts = {})
      Enumerator.new do |yielder|
        Gitlab::Pagination::Keyset::Iterator.new(scope: scope, **opts).each_batch(of: BATCH_SIZE) do |records|
          ::Vulnerability
            .id_in(records.pluck_primary_key)
            .with_findings_scanner_identifiers_and_notes
            .each { |preloaded_record| yielder << preloaded_record }
        end
      end
    end

    def group_vulnerabilities_enumerator(iterator = group_vulnerability_reads_iterator)
      Enumerator.new do |yielder|
        iterator.each_batch(of: VULNERABILITY_READS_QUERY_BATCH_SIZE) do |records|
          records.with_export_entities.to_a.each do |vulnerability_read|
            yielder.yield(vulnerability_read.vulnerability)
          end
        end
      end
    end

    def group_vulnerability_reads_iterator
      scope = group_vulnerability_reads_scope
      scope = yield scope if block_given?

      Gitlab::Pagination::Keyset::Iterator.new(
        scope: scope,
        use_union_optimization: false
      )
    end

    def group_vulnerability_reads_scope
      exportable.vulnerability_reads(use_traversal_ids: true).unarchived.order_traversal_ids_asc
    end

    def should_use_segmented_export?
      exportable.is_a?(Group) &&
        Feature.enabled?(:segmented_vulnerability_report_export, exportable)
    end

    def schedule_export_deletion
      VulnerabilityExports::ExportDeletionWorker.perform_in(1.hour, vulnerability_export.id)
    end

    def filename
      [
        exportable.full_path.parameterize,
        '_vulnerabilities_',
        Time.current.utc.strftime('%FT%H%M'),
        '.',
        format
      ].join
    end

    def segment_filename(start_id, end_id)
      [
        exportable.full_path.parameterize,
        "_vulnerabilities_segment_#{start_id}_to_#{end_id}",
        Time.current.utc.strftime('%FT%H%M'),
        '.',
        format
      ].join
    end
  end
end
