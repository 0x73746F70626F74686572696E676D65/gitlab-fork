# frozen_string_literal: true

module API
  class VulnerabilityFindings < Grape::API
    include PaginationParams

    helpers do
      params :vulnerability_findings_params do
        optional :report_type, type: Array[String], desc: 'The type of report vulnerability belongs to',
                 values: ::Vulnerabilities::Occurrence.report_types.keys,
                 default: ::Vulnerabilities::Occurrence.report_types.keys
        optional :scope, type: String, desc: 'Return vulnerabilities for the given scope: `dismissed` or `all`',
                 default: 'dismissed', values: %w[all dismissed]
        optional :severity,
                 type: Array[String],
                 desc: 'Returns issues belonging to specified severity level: '\
                       '`undefined`, `info`, `unknown`, `low`, `medium`, `high`, or `critical`. Defaults to all',
                 values: ::Vulnerabilities::Occurrence.severities.keys,
                 default: ::Vulnerabilities::Occurrence.severities.keys
        optional :confidence,
                 type: Array[String],
                 desc: 'Returns vulnerabilities belonging to specified confidence level: '\
                       '`undefined`, `ignore`, `unknown`, `experimental`, `low`, `medium`, `high`, or `confirmed`. '\
                       'Defaults to all',
                 values: ::Vulnerabilities::Occurrence.confidences.keys,
                 default: ::Vulnerabilities::Occurrence.confidences.keys
        optional :pipeline_id, type: String, desc: 'The ID of the pipeline'

        use :pagination
      end

      def vulnerability_occurrences_by(params)
        pipeline = if params[:pipeline_id]
                     params[:project].all_pipelines.find_by(id: params[:pipeline_id]) # rubocop:disable CodeReuse/ActiveRecord
                   else
                     params[:project].latest_pipeline_with_security_reports
                   end

        return [] unless pipeline

        Security::PipelineVulnerabilitiesFinder.new(pipeline: pipeline, params: params).execute
      end

      def respond_with_vulnerabilities
        # TODO: implement the "Get a list of project's Vulnerabilities" step
        # of https://gitlab.com/gitlab-org/gitlab-ee/issues/10242#status
        not_found!
      end

      def respond_with_vulnerability_findings
        authorize! :read_project_security_dashboard, user_project

        vulnerability_occurrences = paginate(
          Kaminari.paginate_array(
            vulnerability_occurrences_by(declared_params.merge(project: user_project))
          )
        )

        Gitlab::Vulnerabilities::OccurrencesPreloader.preload_feedback!(vulnerability_occurrences)

        present vulnerability_occurrences,
                with: ::Vulnerabilities::OccurrenceEntity,
                request: GrapeRequestProxy.new(request, current_user)
      end
    end

    before do
      authenticate!
    end

    params do
      requires :id, type: String, desc: 'The ID of a project'
    end

    resource :projects, requirements: API::NAMESPACE_OR_PROJECT_REQUIREMENTS do
      params do
        use :vulnerability_findings_params
      end
      desc 'Get a list of project vulnerabilities' do
        success ::Vulnerabilities::OccurrenceEntity
      end
      get ':id/vulnerabilities' do
        if Feature.enabled?(:first_class_vulnerabilities)
          respond_with_vulnerabilities
        else
          respond_with_vulnerability_findings
        end
      end

      params do
        use :vulnerability_findings_params
      end
      desc 'Get a list of project vulnerability findings' do
        success ::Vulnerabilities::OccurrenceEntity
      end
      get ':id/vulnerability_findings' do
        if Feature.enabled?(:first_class_vulnerabilities)
          respond_with_vulnerability_findings
        else
          not_found!
        end
      end
    end
  end
end
