# frozen_string_literal: true

module Gitlab
  module VulnerabilityScanning
    class SecurityReportBuilder
      include Gitlab::Utils::StrongMemoize

      # We don't have a schema version set because there is no JSON to validate.
      SECURITY_REPORT_VERSION = "0.0.0"

      SCANNER_EXTERNAL_ID = "gitlab-sbom-vulnerability-scanner"
      SCANNER_NAME = "GitLab SBoM Vulnerability Scanner"
      SCANNER_VENDOR = "GitLab"
      SCANNER_VERSION = "0.1.0"

      attr_reader :report

      def initialize(report_type, build, sbom)
        @report_type = report_type
        @build = build
        @sbom = sbom
        @report = ::Gitlab::Ci::Reports::Security::Report.new(report_type, build.pipeline, Time.zone.now)
        report.version = SECURITY_REPORT_VERSION
        report.add_scanner(scanner)
      end

      def add_component_advisories(component, advisories)
        advisories.each do |advisory|
          next if advisory.blank?

          add_finding(component, advisory)
        end
      end

      private

      attr_reader :report_type, :build, :sbom

      def scanner
        ::Gitlab::Ci::Reports::Security::Scanner.new(
          external_id: SCANNER_EXTERNAL_ID,
          name: SCANNER_NAME,
          vendor: SCANNER_VENDOR,
          version: SCANNER_VERSION)
      end
      strong_memoize_attr :scanner

      def add_finding(component, advisory)
        builder = case report_type
                  when "dependency_scanning"
                    DependencyScanning::FindingBuilder.new(build, sbom, report, component, advisory)
                  end

        return unless builder

        finding = builder.finding
        report.add_finding(finding)
      end
    end
  end
end
