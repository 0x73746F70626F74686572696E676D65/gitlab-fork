# frozen_string_literal: true

module Gitlab
  module VulnerabilityScanning
    class FindingBuilder
      include Gitlab::Utils::StrongMemoize

      def initialize(build, sbom, security_report, component, advisory)
        @build = build
        @sbom = sbom
        @security_report = security_report
        @component = component
        @advisory = advisory
      end

      def finding
        validate!

        ::Gitlab::Ci::Reports::Security::Finding.new(
          uuid: uuid,
          report_type: security_report.type,
          name: title,
          compare_key: '',
          location: location,
          evidence: nil,
          severity: ::Enums::Vulnerability.parse_severity_level(severity),
          confidence: 'unknown',
          scanner: security_report.primary_scanner,
          scan: security_report&.scan,
          identifiers: identifiers,
          links: links,
          original_data: original_data,
          metadata_version: metadata_version,
          details: details,
          project_id: build.project.id,
          found_by_pipeline: build.pipeline)
      end
      strong_memoize_attr :finding

      private

      attr_reader :build, :sbom, :security_report, :component, :advisory

      def validate!
        raise NoMethodError, "#{self.class}#validate! is not implemented"
      end

      def uuid
        uuid_v5_name_components = {
          report_type: security_report.type,
          primary_identifier_fingerprint: primary_identifier&.fingerprint,
          location_fingerprint: location_fingerprint,
          project_id: build.project.id
        }

        # Inline the comparison to squeeze out some performance
        if security_report.type.nil? ||
            primary_identifier&.fingerprint.nil? ||
            location_fingerprint.nil?
          Gitlab::AppLogger.warn(message: "One or more UUID name components are nil",
            components: uuid_v5_name_components)
          return
        end

        ::Security::VulnerabilityUUID.generate(
          report_type: uuid_v5_name_components[:report_type],
          primary_identifier_fingerprint: uuid_v5_name_components[:primary_identifier_fingerprint],
          location_fingerprint: uuid_v5_name_components[:location_fingerprint],
          project_id: uuid_v5_name_components[:project_id]
        )
      end

      def primary_identifier
        identifiers.first
      end

      def location_fingerprint
        location&.fingerprint
      end

      def identifiers
        advisory.identifiers.map do |identifier|
          security_report.add_identifier(
            ::Gitlab::Ci::Reports::Security::Identifier.new(
              external_type: identifier['type'],
              external_id: identifier['value'],
              name: identifier['name'],
              url: identifier['url']))
        end
      end
      strong_memoize_attr :identifiers

      def title
        identifier = identifiers.find(&:cve?) || identifiers.find(&:cwe?) || identifiers.first

        if location&.fingerprint_path
          "#{identifier.name} in #{location.fingerprint_path}"
        else
          identifier.name.to_s
        end
      end
      strong_memoize_attr :title

      def links
        advisory.urls.map { |url| ::Gitlab::Ci::Reports::Security::Link.new(name: nil, url: url) }
      end

      def severity
        advisory&.cvss_v3&.severity || advisory&.cvss_v2&.severity
      end

      def details
        {}
      end

      def location
        raise NoMethodError, "#{self.class}#location is not implemented"
      end

      def original_data
        raise NoMethodError, "#{self.class}#original_data is not implemented"
      end

      def metadata_version
        "0.0.0"
      end
      strong_memoize_attr :metadata_version
    end
  end
end
