# frozen_string_literal: true

module Gitlab
  module VulnerabilityScanning
    module DependencyScanning
      class FindingBuilder < VulnerabilityScanning::FindingBuilder
        include Gitlab::Utils::StrongMemoize

        private

        def validate!
          if input_file.nil?
            security_report.add_error('ContinuousDependencyScanning',
              'Missing required gitlab:dependency_scanning CycloneDX properties')
          end

          !security_report.errored?
        end

        def title
          advisory.title
        end
        strong_memoize_attr :title

        def details
          {
            vulnerable_package: {
              name: "Vulnerable Package",
              type: "text",
              value: "#{component.name}:#{component.version}"
            }
          }.with_indifferent_access.freeze
        end

        def input_file
          sbom.source&.input_file_path || sbom.source&.source_file_path
        end
        strong_memoize_attr :input_file

        def location
          ::Gitlab::Ci::Reports::Security::Locations::DependencyScanning.new(
            file_path: input_file,
            package_name: component.name,
            package_version: component.version
          )
        end
        strong_memoize_attr :location

        def gemnasium_identifier
          {
            type: "gemnasium",
            value: advisory.advisory_xid,
            name: "Gemnasium-#{advisory.advisory_xid}"
          }.with_indifferent_access.freeze
        end
        strong_memoize_attr :gemnasium_identifier

        def identifiers
          # The gemnasium identifier is prepended for all dependency scanning
          # findings. This is required since it has historically been used
          # as the primary identifier for dependency scanning findings.
          # Creating findings without this would lead to new findings
          # appearing, i.e. it would incorrectly duplicate findings.
          # See https://gitlab.com/gitlab-org/gitlab/-/issues/417787
          [gemnasium_identifier]
            .concat(advisory.identifiers)
            .map do |identifier|
              security_report.add_identifier(
                ::Gitlab::Ci::Reports::Security::Identifier.new(
                  external_type: identifier['type'],
                  external_id: identifier['value'],
                  name: identifier['name'],
                  url: identifier['url']))
            end
        end
        strong_memoize_attr :identifiers

        def original_data
          {
            message: title,
            description: advisory.description,
            # TODO: There can be more than one package affected by
            # an advisory. Picking the first one is not a great solution
            # and is only a temporary implementation.
            # To be removed in https://gitlab.com/gitlab-org/gitlab/-/issues/417627
            solution: advisory.affected_packages.first&.solution,
            location: {
              file: input_file,
              dependency: {
                package: { name: component.name },
                version: component.version
              }
            }
          }.with_indifferent_access.freeze
        end
      end
    end
  end
end
