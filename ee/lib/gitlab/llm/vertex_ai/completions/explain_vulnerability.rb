# frozen_string_literal: true

module Gitlab
  module Llm
    module VertexAi
      module Completions
        class ExplainVulnerability
          DEFAULT_ERROR = 'An unexpected error has occurred.'

          def initialize(template_class)
            @template_class = template_class
          end

          def execute(user, vulnerability, options)
            unless vertex_ai?(vulnerability)
              return ::Gitlab::Llm::OpenAi::Completions::ExplainVulnerability
                .new(template_class)
                .execute(user, vulnerability, options)
            end

            json = json_for(user, vulnerability)

            GraphqlTriggers.ai_completion_response(
              user.to_global_id,
              vulnerability.to_global_id,
              {
                id: SecureRandom.uuid,
                model_name: vulnerability.class.name,
                response_body: json.dig(:predictions, 0, :candidates, 0, :content),
                errors: [json.dig(:error, :message)].compact
              }
            )
          rescue StandardError => error
            Gitlab::ErrorTracking.track_exception(error)

            ::Gitlab::Llm::OpenAi::ResponseService
              .new(user, vulnerability, { error: { message: DEFAULT_ERROR } }.to_json, options: {})
              .execute
          end

          private

          attr_reader :template_class

          def json_for(user, vulnerability)
            key = [vulnerability.cache_key, 'explain'].join('/')
            Rails.cache.fetch(key, expires_in: 5.minutes, skip_nil: true) do
              template = template_class.new(vulnerability)
              Gitlab::Json.parse(response_for(user, template))
            end.with_indifferent_access
          end

          def response_for(user, template)
            client_class = ::Gitlab::Llm::VertexAi::Client
            client_class
              .new(user)
              .chat(content: template.to_prompt, **template.options(client_class))
          end

          def vertex_ai?(vulnerability)
            Feature.enabled?(:tofa_experimentation, vulnerability.project)
          end
        end
      end
    end
  end
end
