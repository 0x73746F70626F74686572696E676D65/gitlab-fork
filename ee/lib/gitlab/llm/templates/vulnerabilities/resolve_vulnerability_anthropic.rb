# frozen_string_literal: true

module Gitlab
  module Llm
    module Templates
      module Vulnerabilities
        class ResolveVulnerabilityAnthropic < ResolveVulnerability
          include Gitlab::Llm::Chain::Concerns::AnthropicPrompt

          SYSTEM_MESSAGE = Gitlab::Llm::Chain::Utils::Prompt.as_system(
            <<~PROMPT.chomp
              You are a software vulnerability developer.
              You can write code that fixes vulnerabilities.
              You just respond with a code fragment, no need to explain it.
              %<language_info>s
            PROMPT
          )
          USER_MESSAGE = Gitlab::Llm::Chain::Utils::Prompt.as_user(
            <<~PROMPT.chomp
              The file "%<filename>s" has this vulnerable code:

              ```
              %<vulnerable_code>s
              ```

              It has the security vulnerability "%<title>s - (%<identifiers>s)". Write code that fixes the vulnerability.
            PROMPT
          )

          private

          def max_code_length
            MAX_CHARACTERS / 10
          end

          def prompt
            {
              messages: Gitlab::Llm::Chain::Utils::Prompt.role_conversation(
                Gitlab::Llm::Chain::Utils::Prompt.format_conversation([USER_MESSAGE], variables)
              ),
              system: Gitlab::Llm::Chain::Utils::Prompt.no_role_text([SYSTEM_MESSAGE], variables),
              model: ::Gitlab::Llm::Anthropic::Client::CLAUDE_3_HAIKU
            }
          end

          def variables
            {
              language_info: language_info,
              title: title,
              filename: filename,
              identifiers: identifiers,
              vulnerable_code: vulnerable_code.chomp
            }
          end

          def language_info
            language = ::CodeSuggestions::ProgrammingLanguage.detect_from_filename(filename)
            return '' unless language.name.present?

            "The code is written in #{language.name} and stored as \"#{filename}\"."
          end
        end
      end
    end
  end
end
