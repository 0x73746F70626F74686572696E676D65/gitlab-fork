# frozen_string_literal: true

module Gitlab
  module Llm
    module Chain
      module Tools
        module ExplainVulnerability
          class Executor < SlashCommandTool
            extend ::Gitlab::Utils::Override
            include Concerns::AiDependent

            NAME = 'ExplainVulnerability'
            RESOURCE_NAME = 'Vulnerability'
            PROVIDER_PROMPT_CLASSES = {
              ai_gateway: ::Gitlab::Llm::Chain::Tools::ExplainVulnerability::Prompts::Anthropic
            }.freeze

            PROMPT_TEMPLATE = [
              Utils::Prompt.as_system(
                <<~PROMPT.chomp
                  You are a software vulnerability developer.
                  You can explain vulnerabilities in code.
                  %<language_info>s
                PROMPT
              ),
              Utils::Prompt.as_user(
                <<~PROMPT
                  Explain the vulnerability "%<title>s - (%<identifiers>s)".
                  Provide a code example with syntax highlighting on how an attacker can take advantage of the vulnerability.
                  Provide a code example with syntax highlighting on how to fix it.
                  Provide the response in markdown format with headers.
                PROMPT
              )
            ].freeze

            SLASH_COMMANDS = {
              '/explain_vulnerability' => {
                instruction: 'Explain the current vulnerability.'
              }
            }.freeze

            def self.slash_commands
              SLASH_COMMANDS
            end

            override :perform
            def perform
              error_message = if disabled?
                                _('This feature is not enabled yet.')
                              elsif resource.class.name != RESOURCE_NAME
                                _('This command is used for explaining vulnerabilities and can only be invoked from ' \
                                  'a vulnerability detail page.')
                              elsif !resource.sast?
                                _('Vulnerability explanation currently only supports vulnerabilities reported by SAST.')
                              end

              return error_with_message(error_message) if error_message

              super
            end

            private

            delegate :title, :file, :finding, to: :resource

            def disabled?
              Feature.disabled?(:explain_vulnerability_tool, resource.try(:project))
            end

            override :command_options
            def command_options
              {
                title: title,
                identifiers: finding.identifier_names.join(', ')
              }
            end

            override :language_info
            def language_info
              filename = File.basename(file.to_s)
              language = ::CodeSuggestions::ProgrammingLanguage.detect_from_filename(filename)
              return '' unless language.name.present?

              "The code is written in #{language.name} and stored as #{filename}"
            end

            def authorize
              Utils::ChatAuthorizer.context(context: context).allowed?
            end
          end
        end
      end
    end
  end
end
