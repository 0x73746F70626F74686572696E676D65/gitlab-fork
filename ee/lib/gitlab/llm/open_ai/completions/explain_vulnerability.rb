# frozen_string_literal: true

module Gitlab
  module Llm
    module OpenAi
      module Completions
        class ExplainVulnerability
          DEFAULT_ERROR = 'An unexpected error has occurred.'

          def initialize(template_class)
            @template_class = template_class
          end

          def execute(user, vulnerability, _options)
            template = template_class.new(vulnerability)
            response = response_for(user, template)

            ::Gitlab::Llm::OpenAi::ResponseService
              .new(user, vulnerability, response, options: {})
              .execute(Gitlab::Llm::OpenAi::ResponseModifiers::Chat.new)
          rescue StandardError => error
            Gitlab::ErrorTracking.track_exception(error)

            ::Gitlab::Llm::OpenAi::ResponseService
              .new(user, vulnerability, { error: { message: DEFAULT_ERROR } }.to_json, options: {})
              .execute
          end

          private

          attr_reader :template_class

          def response_for(user, template)
            client_class = ::Gitlab::Llm::OpenAi::Client
            client_class
              .new(user)
              .chat(content: template.to_prompt, **template.options(client_class))
          end
        end
      end
    end
  end
end
