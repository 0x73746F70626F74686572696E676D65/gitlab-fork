# frozen_string_literal: true

require 'spec_helper'

RSpec.describe 'User with admin_vulnerability custom role', feature_category: :system_access do
  let_it_be(:user) { create(:user) }
  let_it_be(:project) { create(:project, :repository, :in_group) }
  let_it_be(:role) { create(:member_role, :guest, :admin_vulnerability, namespace: project.group) }
  let_it_be(:membership) { create(:group_member, :guest, user: user, source: project.group, member_role: role) }

  before do
    stub_licensed_features(custom_roles: true, security_dashboard: true)
  end

  describe Projects::Security::VulnerabilitiesController do
    before do
      sign_in(user)
    end

    describe "#new" do
      it 'user has access via a custom role' do
        get new_project_security_vulnerability_path(project)

        expect(response).to have_gitlab_http_status(:ok)
        expect(response.body).to have_text(
          format(s_('VulnerabilityManagement|Add vulnerability finding'))
        )
      end
    end
  end

  describe Mutations::Vulnerabilities::Create do
    include GraphqlHelpers

    it "has access via a custom role" do
      post_graphql_mutation(graphql_mutation(:vulnerability_create, {
        project: project.to_global_id,
        name: "example",
        description: "example",
        scanner: {
          id: "my-custom-scanner",
          name: "example",
          url: "https://example.org",
          vendor: { name: "example" },
          version: "1.0.0"
        },
        identifiers: [{
          name: "example",
          url: "https://example.org/example"
        }],
        state: "DETECTED",
        severity: "UNKNOWN",
        confidence: "UNKNOWN",
        solution: "curl -s 'https://unpkg.com/emoji.json@13.1.0/emoji.json' | jq -r '.[] | .char'",
        message: "example"
      }), current_user: user)

      expect(response).to have_gitlab_http_status(:success)
      mutation_response = graphql_mutation_response(:vulnerability_create)
      expect(mutation_response["vulnerability"]).to be_present
      expect(mutation_response["errors"]).to be_empty
    end
  end
end
