# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Security::Ingestion::Tasks::IngestVulnerabilityReads::Update, feature_category: :vulnerability_management do
  let_it_be(:user) { create(:user) }
  let_it_be(:project) { create(:project) }
  let_it_be(:pipeline) { create(:ci_pipeline, project: project) }
  let_it_be(:location) { create(:ci_reports_security_locations_sast, start_line: 29, end_line: 29) }
  let_it_be(:scanner) { build(:ci_reports_security_scanner, external_id: 'scanner', name: 'Scanner') }
  let_it_be(:vulnerability) { create_vulnerability }
  let(:vulnerability_read) { vulnerability.vulnerability_read }

  let(:external_type) { 'owasp' }
  let(:external_id) { 'A1:2017-Injection' }

  let(:ci_reports_security_identifier) do
    create(:ci_reports_security_identifier, external_id: external_id, external_type: external_type)
  end

  let(:identifier) do
    create(:vulnerabilities_identifier, external_id: external_id, external_type: external_type,
      fingerprint: ci_reports_security_identifier.fingerprint)
  end

  let(:ci_reports_security_finding) do
    create(:ci_reports_security_finding, identifiers: [ci_reports_security_identifier],
      location: location, scanner: scanner)
  end

  let_it_be(:original_scanner) { create(:vulnerabilities_scanner, external_id: 'scanner1', name: 'Scanner1') }
  let_it_be(:new_scanner) { create(:vulnerabilities_scanner, external_id: 'scanner2', name: 'Scanner2') }
  let!(:vulnerability_finding) do
    create(
      :vulnerabilities_finding,
      vulnerability: vulnerability,
      project: pipeline.project,
      primary_identifier: identifier,
      identifiers: [identifier],
      location_fingerprint: location.fingerprint,
      scanner: original_scanner
    )
  end

  let(:security_finding) { create(:security_finding, scanner: original_scanner) }
  let!(:finding_map) do
    create(:finding_map,
      pipeline: pipeline,
      security_finding: security_finding,
      report_finding: ci_reports_security_finding)
  end

  let(:update_service) { described_class.new(pipeline, [finding_map]) }

  before do
    finding_map.vulnerability_id = vulnerability.id
  end

  subject(:execute) do
    update_service.execute

    vulnerability_read.reload
  end

  shared_examples 'does not fire an UPDATE query' do
    it 'does not fire an UPDATE query' do
      control = ActiveRecord::QueryRecorder.new { execute }

      expect(control.occurrences_starting_with(/UPDATE/i)).to be_empty
    end
  end

  describe 'scanner' do
    # This will make sure updating the `vulnerability_reads` record
    # is not triggered by OWASP identifier update.
    let(:external_type) { 'cve' }

    context 'when the scanner changes' do
      before do
        vulnerability_finding.update!(scanner: new_scanner)
        security_finding.update!(scanner: new_scanner)
      end

      it 'updates the scanner to match the vulnerability_finding' do
        expect { execute }.to change { vulnerability_read.reload.scanner }.from(original_scanner).to(new_scanner)
      end
    end

    context 'when the scanner does not change' do
      it_behaves_like 'does not fire an UPDATE query'
    end
  end

  describe 'archived and traversal_ids' do
    shared_examples 'updates vulnerability reads' do
      # This will make sure updating the `vulnerability_reads` record
      # is not triggered by OWASP identifier update.
      let(:external_type) { 'cve' }

      context 'when the finding_map is for a new vulnerability' do
        before do
          finding_map.new_record = true
        end

        it 'sets them for each vulnerability read to the values of the owning project' do
          execute

          expect(vulnerability_read.archived).to eq(project.archived)
          expect(vulnerability_read.traversal_ids).to eq(
            project.namespace.traversal_ids
          )
        end
      end

      context 'when the finding_map is for an existing vulnerability' do
        it_behaves_like 'does not fire an UPDATE query'
      end
    end

    context 'when the project is not archived' do
      it_behaves_like 'updates vulnerability reads'
    end

    context 'when the project is archived' do
      before do
        project.update!(archived: true)
      end

      it_behaves_like 'updates vulnerability reads'
    end

    context 'when the project namespace is nested' do
      before do
        project.namespace.update!(traversal_ids: %w[9970 112345 09847])
      end

      it_behaves_like 'updates vulnerability reads'
    end
  end

  describe 'owasp_top_10' do
    shared_examples 'updates vulnerability reads' do |external_id_name|
      it 'updates owasp_top_10 on vulnerability reads' do
        execute

        final_external_id = external_id
        final_external_id += "-#{external_id_name}" if external_id_name

        expect(vulnerability_read.owasp_top_10).to eq(final_external_id)
      end
    end

    shared_examples 'does not update vulnerability reads' do
      it 'does not set owasp_top_10 on vulnerability reads' do
        execute

        expect(vulnerability_read.owasp_top_10).to be_nil
      end

      it_behaves_like 'does not fire an UPDATE query'
    end

    context 'with valid owasp identifier' do
      context 'for 2017 external_id without name' do
        let(:external_id) { 'A1:2017' }

        it_behaves_like 'updates vulnerability reads', 'Injection'
      end

      context 'for 2021 external_id without name' do
        let(:external_id) { 'A3:2021' }

        it_behaves_like 'updates vulnerability reads', 'Injection'
      end

      context 'for 2017 external_id with name' do
        let(:external_id) { 'A1:2017-Injection' }

        it_behaves_like 'updates vulnerability reads'
      end

      context 'for 2021 external_id with name' do
        let(:external_id) { 'A3:2021-Injection' }

        it_behaves_like 'updates vulnerability reads'
      end

      context 'when primary identifier is not owasp identifier' do
        let(:ci_reports_security_cve_identifier) do
          create(:ci_reports_security_identifier, external_id: 'CVE-2021-22222', external_type: 'cve')
        end

        let(:cve_identifier) do
          create(:vulnerabilities_identifier, external_id: 'CVE-2021-22222', external_type: 'cve',
            fingerprint: ci_reports_security_cve_identifier.fingerprint)
        end

        let(:ci_reports_security_finding) do
          create(:ci_reports_security_finding, identifiers:
            [ci_reports_security_cve_identifier, ci_reports_security_identifier],
            location: location, scanner: scanner)
        end

        let!(:vulnerability_finding) do
          create(:vulnerabilities_finding, vulnerability: vulnerability, project: pipeline.project,
            primary_identifier: cve_identifier,
            identifiers: [cve_identifier, identifier],
            location_fingerprint: location.fingerprint)
        end

        it_behaves_like 'updates vulnerability reads'
      end
    end

    context 'with invalid owasp identifier' do
      context 'for invalid priority label' do
        let(:external_id) { 'A1' }

        it_behaves_like 'does not update vulnerability reads'
      end

      context 'for invalid year' do
        let(:external_id) { 'A1:2010' }

        it_behaves_like 'does not update vulnerability reads'
      end

      context 'for invalid external_id with correct label year and incorrect name' do
        let(:external_id) { 'A1:2021-Injection' }

        it_behaves_like 'does not update vulnerability reads'
      end
    end

    context 'with non owasp identifier' do
      let(:external_type) { 'CVE' }
      let(:external_id) { 'CVE-2023-XXXX' }

      it_behaves_like 'does not update vulnerability reads'

      context 'when the vulnerability_read record already has `owasp_top_10` assigned' do
        before do
          vulnerability_read.update!(owasp_top_10: 'A1:2017-Injection')
        end

        it 'resets the `owasp_top_10` attribute' do
          expect { execute }.to change { vulnerability_read.reload.owasp_top_10 }.to(nil)
        end
      end
    end
  end

  private

  def create_vulnerability(severity: 7, confidence: 7, report_type: 0)
    create(:vulnerability,
      project: pipeline.project,
      author: user,
      severity: severity,
      confidence: confidence,
      report_type: report_type)
  end
end
