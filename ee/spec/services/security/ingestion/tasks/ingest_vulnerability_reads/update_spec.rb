# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Security::Ingestion::Tasks::IngestVulnerabilityReads::Update, feature_category: :vulnerability_management do
  let_it_be(:user) { create(:user) }
  let_it_be(:pipeline) { create(:ci_pipeline) }
  let_it_be(:location) { create(:ci_reports_security_locations_sast, start_line: 29, end_line: 29) }
  let_it_be(:scanner) { build(:ci_reports_security_scanner, external_id: 'scanner', name: 'Scanner') }
  let_it_be(:vulnerability) { create_vulnerability }

  let(:external_type) { 'owasp' }
  let(:external_id) { 'A1:2017-Injection' }

  let(:ci_reports_security_identifier) do
    create(:ci_reports_security_identifier, external_id: external_id, external_type: external_type)
  end

  let(:identifier) do
    create(:vulnerabilities_identifier, external_id: external_id, external_type: external_type,
      fingerprint: ci_reports_security_identifier.fingerprint)
  end

  let(:ci_reports_security_finding) do
    create(:ci_reports_security_finding, identifiers: [ci_reports_security_identifier],
      location: location, scanner: scanner)
  end

  let!(:vulnerability_finding) do
    create(:vulnerabilities_finding, vulnerability: vulnerability, project: pipeline.project,
      primary_identifier: identifier,
      identifiers: [identifier],
      location_fingerprint: location.fingerprint)
  end

  let!(:finding_map) { create(:finding_map, report_finding: ci_reports_security_finding) }
  let!(:update_service) { described_class.new(pipeline, [finding_map]) }

  before do
    # For existing vulnerabilities it is set in IngestFindings.
    # See: https://gitlab.com/gitlab-org/gitlab/-/blob/e802e761b93d4166a6741e0d2b1b09f694605b01/ee/app/services/security/ingestion/tasks/ingest_findings.rb#L20
    # For new vulnerabilities it is set in IngestVulnerabilities::Create.
    # See: https://gitlab.com/gitlab-org/gitlab/-/blob/cab15cc37bf5ee6e847325170d49da0b84ea3aca/ee/app/services/security/ingestion/tasks/ingest_vulnerabilities/create.rb#L21
    finding_map.vulnerability_id = vulnerability.id
  end

  describe 'owasp_top_10' do
    shared_examples 'updates vulnerability reads' do |external_id_name|
      it 'updates vulnerability reads' do
        update_service.execute

        final_external_id = external_id
        final_external_id += "-#{external_id_name}" if external_id_name

        expect(Vulnerabilities::Read.find_by(vulnerability_id: vulnerability.id).owasp_top_10).to eq(final_external_id)
      end
    end

    shared_examples 'does not update vulnerability reads' do
      it 'does not update vulnerability reads' do
        update_service.execute

        expect(Vulnerabilities::Read.find_by(vulnerability_id: vulnerability.id).owasp_top_10).to be_nil
      end
    end

    context 'with valid owasp identifier' do
      context 'for 2017 external_id without name' do
        let(:external_id) { 'A1:2017' }

        it_behaves_like 'updates vulnerability reads', 'Injection'
      end

      context 'for 2021 external_id without name' do
        let(:external_id) { 'A3:2021' }

        it_behaves_like 'updates vulnerability reads', 'Injection'
      end

      context 'for 2017 external_id with name' do
        let(:external_id) { 'A1:2017-Injection' }

        it_behaves_like 'updates vulnerability reads'
      end

      context 'for 2021 external_id with name' do
        let(:external_id) { 'A3:2021-Injection' }

        it_behaves_like 'updates vulnerability reads'
      end

      context 'when primary identifier is not owasp identifier' do
        let(:ci_reports_security_cve_identifier) do
          create(:ci_reports_security_identifier, external_id: 'CVE-2021-22222', external_type: 'cve')
        end

        let(:cve_identifier) do
          create(:vulnerabilities_identifier, external_id: 'CVE-2021-22222', external_type: 'cve',
            fingerprint: ci_reports_security_cve_identifier.fingerprint)
        end

        let(:ci_reports_security_finding) do
          create(:ci_reports_security_finding, identifiers:
            [ci_reports_security_cve_identifier, ci_reports_security_identifier],
            location: location, scanner: scanner)
        end

        let!(:vulnerability_finding) do
          create(:vulnerabilities_finding, vulnerability: vulnerability, project: pipeline.project,
            primary_identifier: cve_identifier,
            identifiers: [cve_identifier, identifier],
            location_fingerprint: location.fingerprint)
        end

        it_behaves_like 'updates vulnerability reads'
      end
    end

    context 'with invalid owasp identifier' do
      context 'for invalid priority label' do
        let(:external_id) { 'A1' }

        it_behaves_like 'does not update vulnerability reads'
      end

      context 'for invalid year' do
        let(:external_id) { 'A1:2010' }

        it_behaves_like 'does not update vulnerability reads'
      end

      context 'for invalid external_id with correct label year and incorrect name' do
        let(:external_id) { 'A1:2021-Injection' }

        it_behaves_like 'does not update vulnerability reads'
      end
    end

    context 'with non owasp identifier' do
      let(:external_type) { 'CVE' }
      let(:external_id) { 'CVE-2023-XXXX' }

      it_behaves_like 'does not update vulnerability reads'
    end
  end

  private

  def create_vulnerability(severity: 7, confidence: 7, report_type: 0)
    create(:vulnerability,
      project: pipeline.project,
      author: user,
      severity: severity,
      confidence: confidence,
      report_type: report_type)
  end
end
