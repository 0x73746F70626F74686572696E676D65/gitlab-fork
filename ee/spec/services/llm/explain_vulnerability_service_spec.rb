# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Llm::ExplainVulnerabilityService, :saas, feature_category: :vulnerability_management do
  let_it_be(:user) { create(:user) }
  let_it_be_with_reload(:namespace) { create(:group_with_plan, plan: :ultimate_plan) }
  let_it_be(:project) { create(:project, namespace: namespace) }
  let_it_be(:vulnerability) { create(:vulnerability, :with_finding, project: project) }
  let_it_be(:options) { { include_source_code: true } }

  subject { described_class.new(user, vulnerability, options) }

  before do
    # Llm::BaseService checks for user.any_group_with_ai_available
    #
    allow(user).to receive(:any_group_with_ai_available?).and_return(true)
  end

  describe '#execute' do
    before do
      allow(Llm::CompletionWorker).to receive(:perform_for)
    end

    context 'when the user is permitted to explain the vulnerability' do
      let(:resource) { vulnerability }
      let(:action_name) { :explain_vulnerability }
      let(:content) { 'Explain vulnerability' }

      before do
        # Llm::BaseService checks for membership to parent group
        namespace.add_developer(user)
        # explain_vulnerability calls Llm::FeatureAuthorizer, which checks:
        # - ai_global_switch,
        # - parent group membership
        # - ai_features license (via StageCheck)
        # - experiment and beta features enabled (via StageCheck)
        allow(Ability).to receive(:allowed?)
          .with(user, :explain_vulnerability, vulnerability)
          .and_return(true)
      end

      it_behaves_like 'schedules completion worker'
    end

    context 'when the user is not permitted to view the vulnerability' do
      before do
        allow(Ability).to receive(:allowed?)
          .with(user, :explain_vulnerability, vulnerability)
          .and_return(false)
      end

      it 'returns an error' do
        expect(subject.execute).to be_error

        expect(Llm::CompletionWorker).not_to have_received(:perform_for)
      end
    end
  end
end
