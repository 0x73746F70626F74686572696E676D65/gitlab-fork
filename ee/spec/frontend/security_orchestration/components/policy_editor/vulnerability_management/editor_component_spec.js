import { shallowMountExtended } from 'helpers/vue_test_utils_helper';
import { DEFAULT_ASSIGNED_POLICY_PROJECT } from 'ee/security_orchestration/constants';
import EditorComponent from 'ee/security_orchestration/components/policy_editor/vulnerability_management/editor_component.vue';
import EditorLayout from 'ee/security_orchestration/components/policy_editor/editor_layout.vue';
import { DEFAULT_VULNERABILITY_MANAGEMENT_POLICY } from 'ee/security_orchestration/components/policy_editor/vulnerability_management/constants';
import {
  mockVulnerabilityManagementManifest,
  mockVulnerabilityManagementObject,
} from 'ee_jest/security_orchestration/mocks/mock_vulnerability_management_policy_data';

describe('EditorComponent', () => {
  let wrapper;
  const defaultProjectPath = 'path/to/project';

  const factory = ({ propsData = {}, provide = {} } = {}) => {
    wrapper = shallowMountExtended(EditorComponent, {
      propsData: {
        assignedPolicyProject: DEFAULT_ASSIGNED_POLICY_PROJECT,
        ...propsData,
      },
      provide: {
        namespacePath: defaultProjectPath,
        ...provide,
      },
    });
  };

  const findPolicyEditorLayout = () => wrapper.findComponent(EditorLayout);

  describe('rule mode', () => {
    it('renders the editor', () => {
      factory();
      expect(findPolicyEditorLayout().exists()).toBe(true);
    });

    it('renders the default policy editor layout', () => {
      factory();
      const editorLayout = findPolicyEditorLayout();
      expect(editorLayout.exists()).toBe(true);
      expect(editorLayout.props()).toMatchObject({
        yamlEditorValue: DEFAULT_VULNERABILITY_MANAGEMENT_POLICY,
        isEditing: false,
        isRemovingPolicy: false,
        isUpdatingPolicy: false,
      });
    });

    it('updates the general policy properties', async () => {
      const name = 'New name';
      factory();
      expect(findPolicyEditorLayout().props('policy').name).toBe('');
      expect(findPolicyEditorLayout().props('yamlEditorValue')).toContain("name: ''");
      await findPolicyEditorLayout().vm.$emit('update-property', 'name', name);
      expect(findPolicyEditorLayout().props('policy').name).toBe(name);
      expect(findPolicyEditorLayout().props('yamlEditorValue')).toContain(`name: ${name}`);
    });
  });

  describe('yaml mode', () => {
    it('updates the policy', async () => {
      factory();
      await findPolicyEditorLayout().vm.$emit('update-yaml', mockVulnerabilityManagementManifest);
      expect(findPolicyEditorLayout().props('policy')).toEqual(mockVulnerabilityManagementObject);
      expect(findPolicyEditorLayout().props('yamlEditorValue')).toBe(
        mockVulnerabilityManagementManifest,
      );
    });
  });
});
