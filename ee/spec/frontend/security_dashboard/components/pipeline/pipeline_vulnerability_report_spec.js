import { shallowMount } from '@vue/test-utils';
import { PortalTarget } from 'portal-vue';
import { nextTick } from 'vue';
import PipelineVulnerabilityReport from 'ee/security_dashboard/components/pipeline/pipeline_vulnerability_report.vue';
import VulnerabilityListGraphql from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_list_graphql.vue';
import VulnerabilityFilters from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_filters.vue';
import FindingModal from 'ee/security_dashboard/components/pipeline/vulnerability_finding_modal.vue';

describe('Pipeline vulnerability report', () => {
  let wrapper;

  const createWrapper = () => {
    wrapper = shallowMount(PipelineVulnerabilityReport);
  };

  const findModal = () => wrapper.findComponent(FindingModal);
  const findFilters = () => wrapper.findComponent(VulnerabilityFilters);
  const findVulnerabilityList = () => wrapper.findComponent(VulnerabilityListGraphql);

  afterEach(() => {
    wrapper.destroy();
  });

  it('shows the expected components', () => {
    createWrapper();

    expect(findFilters().exists()).toBe(true);
    expect(findVulnerabilityList().exists()).toBe(true);
    expect(wrapper.find(PortalTarget).exists()).toBe(true);
  });

  describe('filters', () => {
    it.each`
      property        | value                                         | expected
      ${'severity'}   | ${['HIGH', 'LOW']}                            | ${['high', 'low']}
      ${'severity'}   | ${[]}                                         | ${undefined}
      ${'severity'}   | ${undefined}                                  | ${undefined}
      ${'reportType'} | ${['CONTAINER_SCANNING', 'SECRET_DETECTION']} | ${['container_scanning', 'secret_detection']}
      ${'reportType'} | ${[]}                                         | ${undefined}
      ${'reportType'} | ${undefined}                                  | ${undefined}
      ${'state'}      | ${['DETECTED', 'CONFIRMED']}                  | ${['DETECTED', 'CONFIRMED']}
      ${'state'}      | ${[]}                                         | ${[]}
      ${'state'}      | ${undefined}                                  | ${undefined}
    `(
      'formats the filters correctly for the pipeline GraphQL endpoint when $property is $value',
      async ({ property, value, expected }) => {
        createWrapper();
        findFilters().vm.$emit('filters-changed', { [property]: value });
        await nextTick();
        // severity and reportType should be lower-cased or undefined if empty/undefined, all other
        // properties should be kept as-is
        expect(findVulnerabilityList().props('filters')).toEqual({ [property]: expected });
      },
    );
  });

  describe('finding modal', () => {
    it(`shows the modal when a vulnerability is clicked and hides it when it's supposed to be hidden`, async () => {
      createWrapper();

      expect(findModal().exists()).toBe(false);

      const finding = {};
      findVulnerabilityList().vm.$emit('vulnerability-clicked', finding);
      await nextTick();

      expect(findModal().props('finding')).toBe(finding);

      findModal().vm.$emit('hide');
      await nextTick();

      expect(findModal().exists()).toBe(false);
    });
  });
});
