import { GlFormGroup, GlCollapsibleListbox } from '@gitlab/ui';
import { shallowMount } from '@vue/test-utils';
import VulnerabilityDissmisalReason from 'ee/security_dashboard/components/pipeline/vulnerability_dismissal_reason.vue';

describe('VulnerabilityDissmisalReason', () => {
  let wrapper;

  const createWrapper = (propsData) => {
    wrapper = shallowMount(VulnerabilityDissmisalReason, {
      propsData,
    });
  };

  const findFormGroup = () => wrapper.findComponent(GlFormGroup);
  const findListBox = () => wrapper.findComponent(GlCollapsibleListbox);

  beforeEach(() => {
    createWrapper();
  });

  it('renders a form group', () => {
    const { dismissAs, fieldRequired } = VulnerabilityDissmisalReason.i18n;
    const formGroup = findFormGroup();

    expect(formGroup.attributes('label')).toBe(dismissAs);
    expect(formGroup.attributes('invalid-feedback')).toBe(fieldRequired);
  });

  it('renders a listbox', () => {
    const listBox = findListBox();

    expect(listBox.props('items')).toMatchObject([
      { text: 'Acceptable risk', value: 'acceptable_risk' },
      { text: 'False positive', value: 'false_positive' },
      { text: 'Mitigating control', value: 'mitigating_control' },
      { text: 'Used in tests', value: 'used_in_tests' },
      { text: 'Not applicable', value: 'not_applicable' },
    ]);
    expect(listBox.props('category')).toBe('secondary');
  });

  it('renders placeholder toggle text when no value', () => {
    expect(findListBox().props('toggleText')).toBe(VulnerabilityDissmisalReason.i18n.selectAReason);
  });

  it('renders dismissal reason toggle text when value is given', () => {
    createWrapper({ value: 'acceptable_risk' });

    expect(findListBox().props('toggleText')).toBe('Acceptable risk');
  });

  it('passes the value to listbox', () => {
    createWrapper({ value: 'acceptable_risk' });

    expect(findListBox().props('selected')).toBe('acceptable_risk');
  });

  describe('invalid state', () => {
    it.each`
      value                | showError | isInvalid | state
      ${null}              | ${false}  | ${false}  | ${'true'}
      ${'acceptable_risk'} | ${false}  | ${false}  | ${'true'}
      ${'acceptable_risk'} | ${true}   | ${false}  | ${'true'}
      ${null}              | ${true}   | ${true}   | ${undefined}
    `(
      'is $isInvalid when value is $value and showError is $showError',
      ({ value, showError, state, isInvalid }) => {
        createWrapper({ value, showError });

        expect(findFormGroup().attributes('state')).toBe(state);
        expect(findListBox().props('variant')).toBe(isInvalid ? 'danger' : 'default');
      },
    );
  });

  it('emits input event when selecting a reason', () => {
    findListBox().vm.$emit('select', 'acceptable_risk');

    expect(wrapper.emitted('input')).toMatchObject([['acceptable_risk']]);
  });
});
