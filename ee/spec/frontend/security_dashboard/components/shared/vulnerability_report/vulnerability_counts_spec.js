import { GlCard, GlSkeletonLoading } from '@gitlab/ui';
import VulnerabilityCounts from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_counts.vue';
import { mountExtended } from 'helpers/vue_test_utils_helper';
import {
  CRITICAL,
  HIGH,
  MEDIUM,
  INFO,
  LOW,
  UNKNOWN,
  SEVERITIES,
} from 'ee/security_dashboard/store/modules/vulnerabilities/constants';
import { SEVERITY_LEVELS } from 'ee/security_dashboard/store/constants';

describe('Vulnerability counts component', () => {
  let wrapper;

  const createWrapper = (props) => {
    wrapper = mountExtended(VulnerabilityCounts, {
      propsData: props,
    });
  };

  const findCards = () => wrapper.findAllComponents(GlCard);
  const findCardWithSeverity = (severity) => wrapper.findByTestId(severity);

  afterEach(() => {
    wrapper.destroy();
  });

  it('should show a skeleton loading component for each count when the isLoading prop is true', () => {
    createWrapper({ isLoading: true, counts: {} });

    findCards().wrappers.forEach((card) => {
      expect(card.findComponent(GlSkeletonLoading).exists()).toBe(true);
    });
  });

  it('should show a card for each severity with the correct count', () => {
    const counts = { [CRITICAL]: 1, [HIGH]: 2, [MEDIUM]: 3, [LOW]: 4, [INFO]: 5, [UNKNOWN]: 6 };
    createWrapper({ counts });

    // Check that there are exactly the same number of cards as there are severities.
    expect(findCards()).toHaveLength(Object.keys(counts).length);

    Object.entries(counts).forEach(([severity, count]) => {
      const cardText = findCardWithSeverity(severity).text();

      expect(cardText).toContain(SEVERITY_LEVELS[severity]);
      expect(cardText).toContain(count);
    });
  });

  it('should show zero for the count when there is no value for that severity', () => {
    createWrapper({ counts: {} });

    SEVERITIES.forEach((severity) => {
      expect(findCardWithSeverity(severity).text()).toContain('0');
    });
  });
});
