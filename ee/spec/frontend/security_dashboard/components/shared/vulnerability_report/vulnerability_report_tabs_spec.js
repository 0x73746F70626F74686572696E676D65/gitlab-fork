import { createLocalVue } from '@vue/test-utils';
import { GlTabs, GlTab, GlBadge } from '@gitlab/ui';
import { nextTick } from 'vue';
import VueRouter from 'vue-router';
import VulnerabilityReportTabs from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_report_tabs.vue';
import VulnerabilityReport from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_report.vue';
import SurveyRequestBanner from 'ee/security_dashboard/components/shared/survey_request_banner.vue';
import projectVulnerabilitiesQuery from 'ee/security_dashboard/graphql/queries/project_vulnerabilities.query.graphql';
import waitForPromises from 'helpers/wait_for_promises';
import { shallowMountExtended } from 'helpers/vue_test_utils_helper';
import { DASHBOARD_TYPES } from 'ee/security_dashboard/store/constants';
import { REPORT_TAB } from 'ee/security_dashboard/components/shared/vulnerability_report/constants';

const localVue = createLocalVue();
localVue.use(VueRouter);
const router = new VueRouter();

const countsDevelopment = [
  { severity: 'critical', count: 1 },
  { severity: 'high', count: 2 },
  { severity: 'info', count: 3 },
  { severity: 'low', count: 4 },
  { severity: 'medium', count: 5 },
  { severity: 'unknown', count: 6 },
];
const countsOperational = [
  { severity: 'critical', count: 1 },
  { severity: 'high', count: 0 },
  { severity: 'info', count: 0 },
  { severity: 'low', count: 10 },
  { severity: 'medium', count: 2 },
  { severity: 'unknown', count: 1 },
];

describe('Vulnerability report tabs component', () => {
  let wrapper;

  const createWrapper = ({ showProjectFilter = false } = {}) => {
    wrapper = shallowMountExtended(VulnerabilityReportTabs, {
      localVue,
      router,
      provide: {
        fullPath: '/full/path',
        surveyRequestSvgPath: '/survey/path',
        dashboardDocumentation: '/dashboard/documentation/path',
        vulnerabilitiesExportEndpoint: '/vuln/export/path',
        emptyStateSvgPath: '/empty/state/svg/path',
        hasJiraVulnerabilitiesIntegrationEnabled: false,
        canAdminVulnerability: true,
        canViewFalsePositive: false,
        dashboardType: DASHBOARD_TYPES.INSTANCE,
      },
      propsData: {
        query: projectVulnerabilitiesQuery,
        showProjectFilter,
      },
      stubs: {
        GlTabs,
        GlTab,
        GlBadge,
      },
    });
  };

  const findTabs = () => wrapper.findComponent(GlTabs);
  const findVulnerabilityReports = () => wrapper.findAllComponents(VulnerabilityReport);

  afterEach(() => {
    wrapper.destroy();
  });

  describe('survey request banner', () => {
    it('shows the survey request banner', () => {
      createWrapper();

      expect(wrapper.findComponent(SurveyRequestBanner).exists()).toBe(true);
    });
  });

  describe('tabs', () => {
    it('renders 2 tabs', () => {
      createWrapper();

      expect(findTabs().exists()).toBe(true);
      const tabs = wrapper.findAllComponents(GlTab);

      expect(tabs).toHaveLength(2);
      expect(wrapper.findByTestId('tab-header-development').text()).toBe(
        'Development vulnerabilities',
      );
      expect(wrapper.findByTestId('tab-header-operational').text()).toBe(
        'Operational vulnerabilities',
      );
    });

    it('displays the counts for each tab', async () => {
      createWrapper();
      const tabs = wrapper.findAllComponents(GlTab);
      const reports = findVulnerabilityReports();

      reports.at(0).vm.$emit('filters', { severity: 'critical' });
      reports.at(0).vm.$emit('counts-changed', countsDevelopment);
      reports.at(1).vm.$emit('counts-changed', countsOperational);
      await waitForPromises();
      expect(tabs.at(0).findComponent(GlBadge).text()).toBe('21');
      expect(tabs.at(1).findComponent(GlBadge).text()).toBe('14');
    });

    it.each`
      queryParam                | tabIndex
      ${undefined}              | ${0}
      ${REPORT_TAB.OPERATIONAL} | ${1}
    `(
      'shows tab with tabIndex $tabIndex when querystring is "$queryParam"',
      ({ queryParam, tabIndex }) => {
        router.replace({ query: { tab: queryParam } });
        createWrapper();

        expect(findTabs().props('value')).toBe(tabIndex);
      },
    );

    it.each`
      tabIndex | queryParam
      ${0}     | ${undefined}
      ${1}     | ${REPORT_TAB.OPERATIONAL}
    `(
      'changes the tab when tabIndex $tabIndex is clicked and sets querystring to "$queryParam"',
      async ({ tabIndex, queryParam }) => {
        createWrapper();
        findTabs().vm.$emit('input', tabIndex);
        await nextTick();

        expect(findTabs().props('value')).toBe(tabIndex);
        expect(router.currentRoute.query.tab).toBe(queryParam);
      },
    );
  });

  describe('vulnerability report components', () => {
    it('gets passed the query prop', () => {
      createWrapper();

      const reports = findVulnerabilityReports();
      reports.wrappers.forEach((report) => {
        expect(report.props('query')).toBe(projectVulnerabilitiesQuery);
      });
    });

    it.each([true, false])('gets passed %s for the showProjectFilter prop', (showProjectFilter) => {
      createWrapper({ showProjectFilter });

      const reports = findVulnerabilityReports();
      reports.wrappers.forEach((report) => {
        expect(report.props('showProjectFilter')).toBe(showProjectFilter);
      });
    });
  });
});
