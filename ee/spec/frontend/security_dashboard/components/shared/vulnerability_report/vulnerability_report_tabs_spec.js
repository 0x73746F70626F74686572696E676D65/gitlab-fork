import { GlTabs } from '@gitlab/ui';
import Vue, { nextTick } from 'vue';
import VueRouter from 'vue-router';
import { shallowMount } from '@vue/test-utils';
import VulnerabilityReportTabs, {
  TAB_NAMES,
} from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_report_tabs.vue';
import VulnerabilityReportTab from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_report_tab.vue';
import {
  FIELD_PRESETS,
  FILTER_PRESETS,
} from 'ee/security_dashboard/components/shared/vulnerability_report/constants';
import { DASHBOARD_TYPES } from 'ee/security_dashboard/store/constants';

Vue.use(VueRouter);

describe('Vulnerability report tabs component', () => {
  let wrapper;
  let router;

  const createWrapper = ({ dashboardType = DASHBOARD_TYPES.PROJECT, slots, featureFlags } = {}) => {
    router = new VueRouter();

    wrapper = shallowMount(VulnerabilityReportTabs, {
      router,
      provide: {
        dashboardType,
        glFeatures: {
          ...featureFlags,
        },
      },
      stubs: { VulnerabilityReportTab },
      slots,
    });
  };

  const findTabsComponent = () => wrapper.findComponent(GlTabs);
  const findAllReportTabs = () => wrapper.findAllComponents(VulnerabilityReportTab);
  const findDevelopmentTab = () => findAllReportTabs().at(0);
  const findOperationalTab = () => findAllReportTabs().at(1);
  const findContainerRegistryTab = () => findAllReportTabs().at(2);

  describe('with container registry flag on', () => {
    describe('tabs root component', () => {
      it.each`
        queryParam                      | tabIndex
        ${undefined}                    | ${0}
        ${TAB_NAMES.OPERATIONAL}        | ${1}
        ${TAB_NAMES.CONTAINER_REGISTRY} | ${2}
      `(
        'shows tab with tabIndex $tabIndex when querystring is "$queryParam"',
        ({ queryParam, tabIndex }) => {
          router = new VueRouter();
          router.replace({ query: { tab: queryParam } });
          createWrapper({ featureFlags: { containerScanningForRegistry: true } });

          expect(findTabsComponent().props('value')).toBe(tabIndex);
          expect(findDevelopmentTab().props('isActiveTab')).toBe(tabIndex === 0);
          expect(findOperationalTab().props('isActiveTab')).toBe(tabIndex === 1);
          expect(findContainerRegistryTab().props('isActiveTab')).toBe(tabIndex === 2);
        },
      );

      it.each`
        tabIndex | queryParam
        ${0}     | ${undefined}
        ${1}     | ${TAB_NAMES.OPERATIONAL}
        ${2}     | ${TAB_NAMES.CONTAINER_REGISTRY}
      `(
        'changes the tab when tabIndex $tabIndex is clicked and sets querystring to "$queryParam"',
        async ({ tabIndex, queryParam }) => {
          createWrapper({ featureFlags: { containerScanningForRegistry: true } });
          findTabsComponent().vm.$emit('input', tabIndex);
          await nextTick();

          expect(findTabsComponent().props('value')).toBe(tabIndex);
          expect(router.currentRoute.query.tab).toBe(queryParam);
        },
      );
    });

    describe('vulnerability report tabs', () => {
      it('shows 3 tabs', () => {
        createWrapper({ featureFlags: { containerScanningForRegistry: true } });
        expect(findAllReportTabs()).toHaveLength(3);
      });

      it.each`
        dashboardType               | expectedDevelopmentDropdowns          | expectedOperationalDropdowns          | expectedContainerRegistryDropdowns
        ${DASHBOARD_TYPES.PROJECT}  | ${FILTER_PRESETS.DEVELOPMENT_PROJECT} | ${FILTER_PRESETS.OPERATIONAL_PROJECT} | ${FILTER_PRESETS.CONTAINER_REGISTRY_PROJECT}
        ${DASHBOARD_TYPES.GROUP}    | ${FILTER_PRESETS.DEVELOPMENT}         | ${FILTER_PRESETS.OPERATIONAL}         | ${FILTER_PRESETS.CONTAINER_REGISTRY}
        ${DASHBOARD_TYPES.INSTANCE} | ${FILTER_PRESETS.DEVELOPMENT}         | ${FILTER_PRESETS.OPERATIONAL}         | ${FILTER_PRESETS.CONTAINER_REGISTRY}
      `(
        'gets the expected props at the the $dashboardType level',
        ({
          dashboardType,
          expectedDevelopmentDropdowns,
          expectedOperationalDropdowns,
          expectedContainerRegistryDropdowns,
        }) => {
          createWrapper({ dashboardType, featureFlags: { containerScanningForRegistry: true } });

          expect(findDevelopmentTab().props()).toMatchObject({
            title: VulnerabilityReportTabs.i18n.developmentTab,
            fields: FIELD_PRESETS.DEVELOPMENT,
            filterDropdowns: expectedDevelopmentDropdowns,
          });

          expect(findOperationalTab().props()).toMatchObject({
            title: VulnerabilityReportTabs.i18n.operationalTab,
            fields: FIELD_PRESETS.OPERATIONAL,
            filterDropdowns: expectedOperationalDropdowns,
            filterFn: wrapper.vm.transformFiltersOperational,
          });

          expect(findContainerRegistryTab().props()).toMatchObject({
            title: VulnerabilityReportTabs.i18n.containerRegistryTab,
            fields: FIELD_PRESETS.CONTAINER_REGISTRY,
            filterDropdowns: expectedContainerRegistryDropdowns,
            filterFn: wrapper.vm.transformFiltersContainerRegistry,
          });
        },
      );

      it('passes the slot content to the development tab', () => {
        createWrapper({
          slots: {
            'header-development': 'header slot content',
          },
        });

        expect(findDevelopmentTab().text()).toContain('header slot content');
      });

      it('shows the operational tab message in the operational tab', () => {
        createWrapper({ featureFlags: { containerScanningForRegistry: true } });

        expect(findOperationalTab().text()).toContain(
          VulnerabilityReportTabs.i18n.operationalTabMessage,
        );
      });

      it('changes tab when the query parameter changes', async () => {
        createWrapper({ featureFlags: { containerScanningForRegistry: true } });

        expect(findDevelopmentTab().props('isActiveTab')).toBe(true);
        expect(findOperationalTab().props('isActiveTab')).toBe(false);
        expect(findContainerRegistryTab().props('isActiveTab')).toBe(false);

        router.replace({ query: { tab: undefined } });
        await nextTick();

        expect(findDevelopmentTab().props('isActiveTab')).toBe(true);
        expect(findOperationalTab().props('isActiveTab')).toBe(false);
        expect(findContainerRegistryTab().props('isActiveTab')).toBe(false);
      });
    });
  });

  describe('with container registry flag off', () => {
    describe('tabs root component', () => {
      it.each`
        queryParam               | tabIndex
        ${undefined}             | ${0}
        ${TAB_NAMES.OPERATIONAL} | ${1}
      `(
        'shows tab with tabIndex $tabIndex when querystring is "$queryParam"',
        ({ queryParam, tabIndex }) => {
          router = new VueRouter();
          router.replace({ query: { tab: queryParam } });
          createWrapper();

          expect(findTabsComponent().props('value')).toBe(tabIndex);
          expect(findDevelopmentTab().props('isActiveTab')).toBe(tabIndex === 0);
          expect(findOperationalTab().props('isActiveTab')).toBe(tabIndex === 1);
        },
      );

      it.each`
        tabIndex | queryParam
        ${0}     | ${undefined}
        ${1}     | ${TAB_NAMES.OPERATIONAL}
      `(
        'changes the tab when tabIndex $tabIndex is clicked and sets querystring to "$queryParam"',
        async ({ tabIndex, queryParam }) => {
          createWrapper();
          findTabsComponent().vm.$emit('input', tabIndex);
          await nextTick();

          expect(findTabsComponent().props('value')).toBe(tabIndex);
          expect(router.currentRoute.query.tab).toBe(queryParam);
        },
      );
    });

    describe('vulnerability report tabs', () => {
      it('shows 2 tabs', () => {
        createWrapper();
        expect(findAllReportTabs()).toHaveLength(2);
      });

      it.each`
        dashboardType               | expectedDevelopmentDropdowns          | expectedOperationalDropdowns
        ${DASHBOARD_TYPES.PROJECT}  | ${FILTER_PRESETS.DEVELOPMENT_PROJECT} | ${FILTER_PRESETS.OPERATIONAL_PROJECT}
        ${DASHBOARD_TYPES.GROUP}    | ${FILTER_PRESETS.DEVELOPMENT}         | ${FILTER_PRESETS.OPERATIONAL}
        ${DASHBOARD_TYPES.INSTANCE} | ${FILTER_PRESETS.DEVELOPMENT}         | ${FILTER_PRESETS.OPERATIONAL}
      `(
        'gets the expected props at the the $dashboardType level',
        ({ dashboardType, expectedDevelopmentDropdowns, expectedOperationalDropdowns }) => {
          createWrapper({ dashboardType });

          expect(findDevelopmentTab().props()).toMatchObject({
            title: VulnerabilityReportTabs.i18n.developmentTab,
            fields: FIELD_PRESETS.DEVELOPMENT,
            filterDropdowns: expectedDevelopmentDropdowns,
          });

          expect(findOperationalTab().props()).toMatchObject({
            title: VulnerabilityReportTabs.i18n.operationalTab,
            fields: FIELD_PRESETS.OPERATIONAL,
            filterDropdowns: expectedOperationalDropdowns,
            filterFn: wrapper.vm.transformFiltersOperational,
          });
        },
      );

      it('passes the slot content to the development tab', () => {
        createWrapper({
          slots: {
            'header-development': 'header slot content',
          },
        });

        expect(findDevelopmentTab().text()).toContain('header slot content');
      });

      it('shows the operational tab message in the operational tab', () => {
        createWrapper();

        expect(findOperationalTab().text()).toContain(
          VulnerabilityReportTabs.i18n.operationalTabMessage,
        );
      });

      it('changes tab when the query parameter changes', async () => {
        createWrapper();

        expect(findDevelopmentTab().props('isActiveTab')).toBe(true);
        expect(findOperationalTab().props('isActiveTab')).toBe(false);

        router.replace({ query: { tab: undefined } });
        await nextTick();

        expect(findDevelopmentTab().props('isActiveTab')).toBe(true);
        expect(findOperationalTab().props('isActiveTab')).toBe(false);
      });
    });
  });
});
