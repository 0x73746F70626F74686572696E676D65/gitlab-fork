import { GlTabs } from '@gitlab/ui';
import Vue, { nextTick } from 'vue';
import VueRouter from 'vue-router';
import { shallowMount } from '@vue/test-utils';
import VulnerabilityReportTabs, {
  TAB_NAMES,
} from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_report_tabs.vue';
import VulnerabilityReportTab from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_report_tab.vue';
import {
  REPORT_TYPE_PRESETS,
  FIELD_PRESETS,
  FILTER_PRESETS,
} from 'ee/security_dashboard/components/shared/vulnerability_report/constants';
import { DASHBOARD_TYPES } from 'ee/security_dashboard/store/constants';

Vue.use(VueRouter);

describe('Vulnerability report tabs component', () => {
  let wrapper;
  let router;

  const createWrapper = ({
    dashboardType = DASHBOARD_TYPES.PROJECT,
    slots,
    containerScanningForRegistryFlag = true,
  } = {}) => {
    router = new VueRouter();

    wrapper = shallowMount(VulnerabilityReportTabs, {
      router,
      provide: {
        dashboardType,
        glFeatures: {
          containerScanningForRegistryFlag,
        },
      },
      stubs: { VulnerabilityReportTab },
      slots,
    });
  };

  const findTabsComponent = () => wrapper.findComponent(GlTabs);
  const findAllReportTabs = () => wrapper.findAllComponents(VulnerabilityReportTab);
  const findDevelopmentTab = () => findAllReportTabs().at(0);
  const findOperationalTab = () => findAllReportTabs().at(1);
  const findContainerRegistryTab = () =>
    wrapper.find('[data-testid="container-scanning-for-registry-tab"]');

  beforeEach(() => {
    createWrapper();
  });

  describe('tabs root component', () => {
    it.each`
      queryParam                      | tabIndex
      ${undefined}                    | ${0}
      ${TAB_NAMES.OPERATIONAL}        | ${1}
      ${TAB_NAMES.CONTAINER_REGISTRY} | ${2}
    `(
      'shows tab with tabIndex $tabIndex when querystring is "$queryParam"',
      ({ queryParam, tabIndex }) => {
        router = new VueRouter();
        router.replace({ query: { tab: queryParam } });
        createWrapper();

        expect(findTabsComponent().props('value')).toBe(tabIndex);
        expect(findDevelopmentTab().props('isActiveTab')).toBe(tabIndex === 0);
        expect(findOperationalTab().props('isActiveTab')).toBe(tabIndex === 1);
        expect(findContainerRegistryTab().props('isActiveTab')).toBe(tabIndex === 2);
      },
    );

    it.each`
      tabIndex | queryParam
      ${0}     | ${undefined}
      ${1}     | ${TAB_NAMES.OPERATIONAL}
      ${2}     | ${TAB_NAMES.CONTAINER_REGISTRY}
    `(
      'changes the tab when tabIndex $tabIndex is clicked and sets querystring to "$queryParam"',
      async ({ tabIndex, queryParam }) => {
        findTabsComponent().vm.$emit('input', tabIndex);
        await nextTick();

        expect(findTabsComponent().props('value')).toBe(tabIndex);
        expect(router.currentRoute.query.tab).toBe(queryParam);
      },
    );
  });

  describe('vulnerability report tabs', () => {
    it('shows 3 tabs', () => {
      expect(findAllReportTabs()).toHaveLength(3);
    });

    it.each`
      dashboardType               | expectedDevelopmentDropdowns          | expectedOperationalDropdowns
      ${DASHBOARD_TYPES.PROJECT}  | ${FILTER_PRESETS.DEVELOPMENT_PROJECT} | ${FILTER_PRESETS.OPERATIONAL_PROJECT}
      ${DASHBOARD_TYPES.GROUP}    | ${FILTER_PRESETS.DEVELOPMENT}         | ${FILTER_PRESETS.OPERATIONAL}
      ${DASHBOARD_TYPES.INSTANCE} | ${FILTER_PRESETS.DEVELOPMENT}         | ${FILTER_PRESETS.OPERATIONAL}
    `(
      'gets the expected props at the the $dashboardType level',
      ({ dashboardType, expectedDevelopmentDropdowns, expectedOperationalDropdowns }) => {
        createWrapper({ dashboardType });

        expect(findDevelopmentTab().props()).toMatchObject({
          title: VulnerabilityReportTabs.i18n.developmentTab,
          fields: FIELD_PRESETS.DEVELOPMENT,
          filterDropdowns: expectedDevelopmentDropdowns,
        });

        expect(findOperationalTab().props()).toMatchObject({
          title: VulnerabilityReportTabs.i18n.operationalTab,
          fields: FIELD_PRESETS.OPERATIONAL,
          filterDropdowns: expectedOperationalDropdowns,
        });
      },
    );

    it.each`
      dashboardType               | expectedContainerRegistryTab
      ${DASHBOARD_TYPES.PROJECT}  | ${true}
      ${DASHBOARD_TYPES.GROUP}    | ${false}
      ${DASHBOARD_TYPES.INSTANCE} | ${false}
    `(
      'reanders correctly at the $dashboardType level',
      ({ dashboardType, expectedContainerRegistryTab }) => {
        createWrapper({ dashboardType });

        expect(findContainerRegistryTab().exists()).toEqual(expectedContainerRegistryTab);
      },
    );

    it('renders the container registry dropdowns', () => {
      expect(findContainerRegistryTab().props()).toMatchObject({
        title: VulnerabilityReportTabs.i18n.containerRegistryTab,
        fields: FIELD_PRESETS.CONTAINER_REGISTRY,
        filterDropdowns: FILTER_PRESETS.CONTAINER_REGISTRY_PROJECT,
      });
    });

    it('passes the slot content to the development tab', () => {
      createWrapper({
        slots: {
          'header-development': 'header slot content',
        },
      });

      expect(findDevelopmentTab().text()).toContain('header slot content');
    });

    it('shows the operational tab message in the operational tab', () => {
      expect(findOperationalTab().text()).toContain(
        VulnerabilityReportTabs.i18n.operationalTabMessage,
      );
    });

    it('changes tab when the query parameter changes', async () => {
      expect(findDevelopmentTab().props('isActiveTab')).toBe(true);
      expect(findOperationalTab().props('isActiveTab')).toBe(false);
      expect(findContainerRegistryTab().props('isActiveTab')).toBe(false);

      router.replace({ query: { tab: undefined } });
      await nextTick();

      expect(findDevelopmentTab().props('isActiveTab')).toBe(true);
      expect(findOperationalTab().props('isActiveTab')).toBe(false);
      expect(findContainerRegistryTab().props('isActiveTab')).toBe(false);
    });
  });

  describe('filter functions', () => {
    const getFilterFn = () => findDevelopmentTab().props('filterFn');

    describe('development report', () => {
      it('does not transform when it contains `reportType`', () => {
        const input = { reportType: ['API_FUZZING'], state: ['DETECTED'] };
        expect(getFilterFn()(input)).toEqual(input);
      });

      it('does not transform when it contains `scanner`', () => {
        const input = { scanner: ['trivy'], state: ['DETECTED'] };
        expect(getFilterFn()(input)).toEqual(input);
      });

      it('adds `reportType` with development preset otherwise', () => {
        const input = { state: ['DETECTED'], scanner: [], reportType: [] };
        expect(getFilterFn()(input)).toEqual({
          ...input,
          reportType: REPORT_TYPE_PRESETS.DEVELOPMENT,
        });
      });
    });

    describe('operational report', () => {
      it('adds `reportType` with operational preset', () => {
        const input = { state: ['DETECTED'] };
        const filterFn = findOperationalTab().props('filterFn');
        expect(filterFn(input)).toEqual({ ...input, reportType: REPORT_TYPE_PRESETS.OPERATIONAL });
      });
    });

    describe('container registry report', () => {
      it('adds `reportType` with container registry preset', () => {
        const input = { state: ['DETECTED'] };
        const filterFn = findContainerRegistryTab().props('filterFn');
        expect(filterFn(input)).toEqual({
          ...input,
          reportType: REPORT_TYPE_PRESETS.CONTAINER_REGISTRY,
        });
      });
    });
  });

  describe('with container registry flag off', () => {
    beforeEach(() => {
      createWrapper({ containerScanningForRegistryFlag: false });
    });

    it('shows 2 tabs', () => {
      expect(findAllReportTabs()).toHaveLength(2);
    });

    it('does not render the container registry tab', () => {
      expect(findContainerRegistryTab().exists()).toBe(false);
    });
  });
});
