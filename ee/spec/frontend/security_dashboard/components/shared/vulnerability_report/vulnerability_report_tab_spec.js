import { GlTab, GlBadge } from '@gitlab/ui';
import { shallowMount } from '@vue/test-utils';
import { nextTick } from 'vue';
import VulnerabilityReportTab from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_report_tab.vue';
import VulnerabilityReport from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_report.vue';
import projectVulnerabilitiesQuery from 'ee/security_dashboard/graphql/queries/project_vulnerabilities.query.graphql';
import { REPORT_TAB } from 'ee/security_dashboard/components/shared/vulnerability_report/constants';

describe('Vulnerability report tab component', () => {
  let wrapper;

  const createWrapper = ({
    title = '',
    type = REPORT_TAB.DEVELOPMENT,
    isActive = false,
    showProjectFilter = false,
    headerSlot = '',
  } = {}) => {
    wrapper = shallowMount(VulnerabilityReportTab, {
      propsData: {
        title,
        type,
        isActive,
        showProjectFilter,
        query: projectVulnerabilitiesQuery,
      },
      stubs: { GlTab },
      slots: { header: headerSlot },
    });
  };

  const findBadge = () => wrapper.findComponent(GlBadge);
  const findReport = () => wrapper.findComponent(VulnerabilityReport);

  afterEach(() => {
    wrapper.destroy();
  });

  it('shows the expected tab title', () => {
    const title = 'custom tab title';
    createWrapper({ title });

    expect(wrapper.text()).toContain(title);
  });

  it.each`
    type                      | isActive | showProjectFilter
    ${REPORT_TAB.DEVELOPMENT} | ${true}  | ${false}
    ${REPORT_TAB.OPERATIONAL} | ${false} | ${true}
  `(
    'passes the expected props to the vulnerability report',
    ({ type, isActive, showProjectFilter }) => {
      createWrapper({ type, isActive, showProjectFilter });

      expect(findReport().props()).toMatchObject({
        query: projectVulnerabilitiesQuery,
        type,
        isActive,
        showProjectFilter,
      });
    },
  );

  it('shows the correct sum when the vulnerability report updates the counts', async () => {
    createWrapper();
    findReport().vm.$emit('counts-changed', [{ count: 8 }, { count: 3 }, { count: 5 }]);
    await nextTick();

    expect(findBadge().text()).toBe('16');
  });

  it('shows the header slot content', () => {
    const headerSlot = 'header slot content';
    createWrapper({ headerSlot });

    expect(wrapper.text()).toContain(headerSlot);
  });
});
