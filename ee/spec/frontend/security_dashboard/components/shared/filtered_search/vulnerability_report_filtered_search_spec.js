import Vue from 'vue';
import VueRouter from 'vue-router';
import { GlFilteredSearch } from '@gitlab/ui';
import { mountExtended } from 'helpers/vue_test_utils_helper';
import FilteredSearch from 'ee/security_dashboard/components/shared/filtered_search/vulnerability_report_filtered_search.vue';
import StatusToken from 'ee/security_dashboard/components/shared/filtered_search/tokens/status_token.vue';
import ActivityToken from 'ee/security_dashboard/components/shared/filtered_search/tokens/activity_token.vue';
import SeverityToken from 'ee/security_dashboard/components/shared/filtered_search/tokens/severity_token.vue';
import ToolToken from 'ee/security_dashboard/components/shared/filtered_search/tokens/tool_token.vue';
import eventHub from 'ee/security_dashboard/components/shared/filtered_search/event_hub';
import { OPERATORS_OR } from '~/vue_shared/components/filtered_search_bar/constants';

Vue.use(VueRouter);

describe('Vulnerability Report Filtered Search component', () => {
  let wrapper;
  let router;

  const findFilteredSearchComponent = () => wrapper.findComponent(GlFilteredSearch);

  const createWrapper = ({ query } = {}) => {
    router = new VueRouter({ mode: 'history' });

    if (query) {
      router.push({ query });
    }

    wrapper = mountExtended(FilteredSearch, {
      router,
      provide: {
        scanners: [],
      },
      stubs: {
        QuerystringSync: true,
      },
    });
  };

  describe('with empty query parameters', () => {
    beforeEach(() => {
      createWrapper();
    });

    it('should mount the component with the correct config', () => {
      const filteredSearch = findFilteredSearchComponent();

      expect(filteredSearch.props('placeholder')).toEqual('Search or filter vulnerabilities...');

      expect(filteredSearch.props('value')).toEqual([
        {
          type: 'state',
          value: {
            data: StatusToken.DEFAULT_VALUES,
            operator: '||',
          },
        },
        {
          type: 'activity',
          value: {
            data: ActivityToken.DEFAULT_VALUES,
            operator: '||',
          },
        },
      ]);

      expect(filteredSearch.props('availableTokens')).toEqual([
        {
          type: 'state',
          title: 'Status',
          multiSelect: true,
          unique: true,
          token: StatusToken,
          operators: OPERATORS_OR,
        },
        {
          type: 'activity',
          title: 'Activity',
          multiSelect: true,
          unique: true,
          token: ActivityToken,
          operators: OPERATORS_OR,
        },
        {
          type: 'severity',
          title: 'Severity',
          multiSelect: true,
          unique: true,
          token: SeverityToken,
          operators: OPERATORS_OR,
        },
        {
          type: 'scanner',
          title: 'Tool',
          multiSelect: true,
          unique: true,
          token: ToolToken,
          operators: OPERATORS_OR,
        },
      ]);
    });

    it('should propagate when event hub emits a `filters-changed` event', () => {
      const eventObj = { state: ['DISMISSED'] };
      eventHub.$emit('filters-changed', eventObj);
      expect(wrapper.emitted('filters-changed')).toEqual([[eventObj]]);
    });

    it('should persist filters when called multiple times', () => {
      eventHub.$emit('filters-changed', { state: ['DISMISSED'] });
      eventHub.$emit('filters-changed', { severity: ['LOW'] });

      expect(wrapper.emitted('filters-changed')).toEqual([
        [{ state: ['DISMISSED'] }],
        [{ state: ['DISMISSED'], severity: ['LOW'] }],
      ]);
    });

    it('should emit empty filters on clear', () => {
      eventHub.$emit('filters-changed', { state: ['DISMISSED'] });
      findFilteredSearchComponent().vm.$emit('clear');
      expect(wrapper.emitted('filters-changed')).toEqual([[{ state: ['DISMISSED'] }], [{}]]);
    });
  });

  describe('with non-empty query parameters', () => {
    beforeEach(() => {
      createWrapper({ query: { severity: 'MEDIUM,LOW', scanner: 'gitlab-api-fuzzing' } });
    });

    it('should pass route parameters to the severity token', () => {
      expect(findFilteredSearchComponent().props('value')).toEqual([
        {
          type: 'state',
          value: {
            data: StatusToken.DEFAULT_VALUES,
            operator: '||',
          },
        },
        {
          type: 'activity',
          value: {
            data: ActivityToken.DEFAULT_VALUES,
            operator: '||',
          },
        },
        {
          type: 'severity',
          value: {
            data: ['MEDIUM', 'LOW'],
            operator: '||',
          },
        },
        {
          type: 'scanner',
          value: {
            data: ['gitlab-api-fuzzing'],
            operator: '||',
          },
        },
      ]);
    });
  });
});
