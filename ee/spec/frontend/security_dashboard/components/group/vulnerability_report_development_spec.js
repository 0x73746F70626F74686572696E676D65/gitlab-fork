import { createLocalVue } from '@vue/test-utils';
import VueApollo from 'vue-apollo';
import { nextTick } from 'vue';
import VulnerabilityReportDevelopment from 'ee/security_dashboard/components/group/vulnerability_report_development.vue';
import VulnerabilityCounts from 'ee/security_dashboard/components/shared/vulnerability_report/vulnerability_counts.vue';
import { shallowMountExtended } from 'helpers/vue_test_utils_helper';
import countsQuery from 'ee/security_dashboard/graphql/queries/vulnerability_severities_count.query.graphql';
import createMockApollo from 'helpers/mock_apollo_helper';

const localVue = createLocalVue();
localVue.use(VueApollo);

const counts = { critical: 1, high: 2, info: 3, low: 4, medium: 5, unknown: 6 };
const groupFullPath = 'path';

const countsRequestHandler = jest.fn().mockResolvedValue({
  data: {
    group: {
      vulnerabilitySeveritiesCount: counts,
    },
  },
});

describe('Vulnerability counts component', () => {
  let wrapper;

  const createWrapper = ({ queries }) => {
    wrapper = shallowMountExtended(VulnerabilityReportDevelopment, {
      localVue,
      apolloProvider: createMockApollo(queries),
      provide: { groupFullPath },
    });
  };

  const findVulnerabilityCounts = () => wrapper.findComponent(VulnerabilityCounts);

  afterEach(() => {
    wrapper.destroy();
    countsRequestHandler.mockClear();
  });

  describe('vulnerability counts query', () => {
    it('calls the counts query once with the expected data', () => {
      createWrapper({ queries: [[countsQuery, countsRequestHandler]] });

      expect(countsRequestHandler).toHaveBeenCalledTimes(1);
      expect(countsRequestHandler).toHaveBeenCalledWith(
        expect.objectContaining({
          isGroup: true,
          fullPath: groupFullPath,
        }),
      );
    });

    it('passes the isLoading prop with the expected values', async () => {
      createWrapper({ queries: [[countsQuery, countsRequestHandler]] });
      expect(findVulnerabilityCounts().props('isLoading')).toBe(true);

      await nextTick();

      expect(findVulnerabilityCounts().props('isLoading')).toBe(false);
    });

    it('passes the results of the counts query to the vulnerability counts component', async () => {
      createWrapper({ queries: [[countsQuery, countsRequestHandler]] });

      await nextTick();

      expect(findVulnerabilityCounts().props('counts')).toMatchObject(counts);
    });
  });
});
