import { GlForm } from '@gitlab/ui';
import MarkdownField from '~/vue_shared/components/markdown/field.vue';
import { mountExtended } from 'helpers/vue_test_utils_helper';
import NewVulnerability from 'ee/vulnerabilities/components/new_vulnerability/new_vulnerability.vue';
import SectionDetails from 'ee/vulnerabilities/components/new_vulnerability/section_details.vue';

describe('New vulnerability component', () => {
  let wrapper;
  const markdownDocsPath = '/path/to/markdown/docs';
  const markdownPreviewPath = '/path/to/markdown/preview';

  const findSectionDetails = () => wrapper.findComponent(SectionDetails);

  const createWrapper = () => {
    return mountExtended(NewVulnerability, {
      propsData: {
        markdownDocsPath,
        markdownPreviewPath,
      },
    });
  };

  beforeEach(() => {
    wrapper = createWrapper();
  });

  afterEach(() => {
    wrapper.destroy();
  });

  it('should render the page title and description', () => {
    expect(wrapper.findByRole('heading', { name: 'Add vulnerability finding' }).exists()).toBe(
      true,
    );
    expect(wrapper.findByTestId('page-description').text()).toBe(
      'Manually add a vulnerability entry into the vulnerability report.',
    );
  });

  it('contains a form', () => {
    expect(wrapper.findComponent(GlForm).exists()).toBe(true);
  });

  it('creates markdown editor with correct props', () => {
    expect(wrapper.findComponent(MarkdownField).props()).toMatchObject({
      markdownDocsPath,
      markdownPreviewPath,
      textareaValue: '',
      canAttachFile: false,
      addSpacingClasses: false,
      isSubmitting: false,
    });
  });

  it.each`
    labelText        | description
    ${'Name'}        | ${'Vulnerability name or type. Ex: Cross-site scripting'}
    ${'Description'} | ${''}
  `('displays the input with the correct label: $labelText', ({ labelText, description }) => {
    expect(wrapper.findByLabelText(labelText).exists()).toBe(true);

    if (description) {
      expect(wrapper.findByText(description).exists()).toBe(true);
    }
  });

  it.each`
    section      | selector              | fields
    ${'Details'} | ${findSectionDetails} | ${{ severity: 'low', detectionMethod: 2, status: 'confirmed' }}
  `('mounts the section $section and reacts on the change event', ({ selector, fields }) => {
    const section = selector();
    expect(section.exists()).toBe(true);
    section.vm.$emit('change', fields);
    expect(wrapper.vm.form).toMatchObject(fields);
  });
});
