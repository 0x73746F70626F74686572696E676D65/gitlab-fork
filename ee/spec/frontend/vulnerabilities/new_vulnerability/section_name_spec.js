import { GlFormInput, GlFormTextarea } from '@gitlab/ui';
import { mountExtended } from 'helpers/vue_test_utils_helper';
import MarkdownField from '~/vue_shared/components/markdown/field.vue';
import SectionName from 'ee/vulnerabilities/components/new_vulnerability/section_name.vue';

describe('New vulnerability - Section Name', () => {
  const markdownDocsPath = '/path/to/markdown/docs';
  const markdownPreviewPath = '/path/to/markdown/preview';

  let wrapper;

  const createWrapper = () => {
    return mountExtended(SectionName, {
      provide: {
        markdownDocsPath,
        markdownPreviewPath,
      },
    });
  };

  beforeEach(() => {
    wrapper = createWrapper();
  });

  afterEach(() => {
    wrapper.destroy();
  });

  it('creates markdown editor with correct props', () => {
    expect(wrapper.findComponent(MarkdownField).props()).toMatchObject({
      markdownDocsPath,
      markdownPreviewPath,
      textareaValue: '',
      canAttachFile: false,
      addSpacingClasses: false,
      isSubmitting: false,
    });
  });

  it.each`
    labelText        | description
    ${'Name'}        | ${'Vulnerability name or type. Ex: Cross-site scripting'}
    ${'Description'} | ${''}
  `('displays the input with the correct label: $labelText', ({ labelText, description }) => {
    expect(wrapper.findByLabelText(labelText).exists()).toBe(true);

    if (description) {
      expect(wrapper.findByText(description).exists()).toBe(true);
    }
  });

  it.each`
    field            | component         | value
    ${'Name'}        | ${GlFormInput}    | ${{ vulnerabilityName: 'CVE 2021', vulnerabilityDesc: '' }}
    ${'Description'} | ${GlFormTextarea} | ${{ vulnerabilityName: '', vulnerabilityDesc: 'Password leak' }}
  `('emits the changes: $field ', async ({ component, value }) => {
    wrapper.setData(value);
    wrapper.findComponent(component).vm.$emit('change', value);
    expect(wrapper.emitted('change')[0][0]).toEqual(value);
  });
});
