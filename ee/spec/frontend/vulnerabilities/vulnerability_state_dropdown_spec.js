import { GlCollapsibleListbox } from '@gitlab/ui';
import { mountExtended } from 'helpers/vue_test_utils_helper';
import VulnerabilityStateDropdown from 'ee/vulnerabilities/components/vulnerability_state_dropdown.vue';
import { VULNERABILITY_STATE_OBJECTS, DISMISSAL_REASONS } from 'ee/vulnerabilities/constants';
import { dismissalDescriptions } from './mock_data';

const { dismissed, ...VULNERABILITY_STATE_OBJECTS_WITHOUT_DISMISSED } = VULNERABILITY_STATE_OBJECTS;
const states = Object.values(VULNERABILITY_STATE_OBJECTS).map((stateObject) => stateObject.state);
const statesWithoutDismissed = Object.values(VULNERABILITY_STATE_OBJECTS_WITHOUT_DISMISSED).map(
  (stateObject) => stateObject.state,
);
const dismissalReasons = Object.keys(DISMISSAL_REASONS);

describe('Vulnerability state dropdown component', () => {
  let wrapper;

  const createWrapper = ({ state = statesWithoutDismissed[0], dismissalReason, disabled } = {}) => {
    wrapper = mountExtended(VulnerabilityStateDropdown, {
      propsData: { state, dismissalReason, disabled },
      provide: {
        dismissalDescriptions,
      },
    });
  };

  const findListbox = () => wrapper.findComponent(GlCollapsibleListbox);
  const findListboxItem = (value) => wrapper.findByTestId(`listbox-item-${value}`);

  beforeEach(() => {
    createWrapper();
  });

  it('is not disabled by default', () => {
    expect(findListbox().props('disabled')).toBe(false);
  });

  it('renders disabled listbox if disabled is true', () => {
    createWrapper({ disabled: true });

    expect(findListbox().props('disabled')).toBe(true);
  });

  it.each(states)('passes correct toggle-text for "%s"', (state) => {
    createWrapper({ state });

    expect(findListbox().props('toggleText')).toBe(VULNERABILITY_STATE_OBJECTS[state].buttonText);
  });

  it.each(statesWithoutDismissed)('passes state as selected prop for "%s"', (state) => {
    createWrapper({ state });

    expect(findListbox().props('selected')).toBe(state);
  });

  it.each(dismissalReasons)(
    'passes dismissal reason as selected prop for "%s"',
    (dismissalReason) => {
      createWrapper({ state: 'dismissed', dismissalReason });

      expect(findListbox().props('selected')).toBe(dismissalReason);
    },
  );

  it('passes null if dismissed without dismissal reason', () => {
    createWrapper({ state: 'dismissed' });

    expect(findListbox().props('selected')).toBe(null);
  });

  it.each(statesWithoutDismissed)('emits only state action when selecting "%s"', (state) => {
    findListbox().vm.$emit('select', state);

    expect(wrapper.emitted('change')).toMatchObject([
      [{ action: VULNERABILITY_STATE_OBJECTS[state].action }],
    ]);
  });

  it.each(dismissalReasons)(
    'emits state action and dismissal reason for "%s"',
    (dismissalReason) => {
      findListbox().vm.$emit('select', dismissalReason);

      expect(wrapper.emitted('change')).toMatchObject([
        [{ action: 'dismiss', dismissalReason: dismissalReason.toUpperCase() }],
      ]);
    },
  );

  it('passes 2 groups to listbox items', () => {
    expect(findListbox().props('items')).toMatchObject([
      { text: '', textSrOnly: true },
      { text: 'Dismiss as...' },
    ]);
  });

  it.each(statesWithoutDismissed)('shows "%s" state listbox item with description', (state) => {
    const { dropdownText, dropdownDescription } = VULNERABILITY_STATE_OBJECTS[state];
    expect(findListboxItem(state).text()).toMatchInterpolatedText(
      `${dropdownText} ${dropdownDescription}`,
    );
  });

  it.each(dismissalReasons)(
    'shows "%s" dismissal reason listbox item with description',
    (dismissalReason) => {
      const text = DISMISSAL_REASONS[dismissalReason];
      const description = dismissalDescriptions[dismissalReason];

      expect(findListboxItem(dismissalReason).text()).toMatchInterpolatedText(
        `${text} ${description}`,
      );
    },
  );
});
