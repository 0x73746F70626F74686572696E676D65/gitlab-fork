import VueApollo from 'vue-apollo';
import {
  GlAccordionItem,
  GlSkeletonLoader,
  GlAlert,
  GlFormCheckbox,
  GlButton,
  GlPopover,
} from '@gitlab/ui';
import Vue, { nextTick } from 'vue';
import { shallowMountExtended } from 'helpers/vue_test_utils_helper';
import ExplainVulnerabilityPrompt from 'ee/vulnerabilities/components/explain_vulnerability/explain_vulnerability_prompt.vue';
import explainVulnerabilityPromptQuery from 'ee/security_dashboard/graphql/queries/explain_vulnerability_prompt.query.graphql';
import createMockApollo from 'helpers/mock_apollo_helper';
import waitForPromises from 'helpers/wait_for_promises';

Vue.use(VueApollo);

describe('Explain Vulnerability Prompt component', () => {
  let wrapper;

  const getMutationResponse = ({ promptWithCode, promptWithoutCode = 'prompt' } = {}) =>
    jest.fn().mockResolvedValue({
      data: {
        explainVulnerabilityPrompt: { promptWithCode, promptWithoutCode },
      },
    });

  const createWrapper = ({
    mutationResponse = getMutationResponse(),
    isDrawerOpen = false,
  } = {}) => {
    wrapper = shallowMountExtended(ExplainVulnerabilityPrompt, {
      apolloProvider: createMockApollo([[explainVulnerabilityPromptQuery, mutationResponse]]),
      propsData: { vulnerabilityGraphqlId: 'gid://gitlab/Vulnerability/1', isDrawerOpen },
    });
  };

  const findAccordionItem = () => wrapper.findComponent(GlAccordionItem);
  const findSendCodeCheckbox = () => wrapper.findComponent(GlFormCheckbox);
  const findLoadingBlock = () => wrapper.findByTestId('loading-block');
  const findErrorAlert = () => wrapper.findComponent(GlAlert);
  const findPromptBlock = () => wrapper.findByTestId('prompt-block');
  const findPopover = () => wrapper.findComponent(GlPopover);
  const findInformationIcon = () => wrapper.findComponent(GlButton);

  describe('clickable accordion item', () => {
    it('shows the "Show Prompt" clickable item', () => {
      createWrapper();

      expect(findAccordionItem().props('title')).toBe('Show prompt');
    });

    it('shows "Hide Prompt" when the prompt is visible', async () => {
      createWrapper();
      await waitForPromises();
      findAccordionItem().vm.$emit('input', true);
      await nextTick();

      expect(findAccordionItem().props('title')).toBe('Hide prompt');
    });
  });

  describe('send code with prompt checkbox', () => {
    it('is indeterminate and disabled when the prompt is loading', () => {
      createWrapper();

      expect(findSendCodeCheckbox().attributes()).toMatchObject({
        disabled: 'true',
        indeterminate: 'true',
      });
    });

    it('shows the information icon', () => {
      createWrapper();

      expect(findInformationIcon().props()).toMatchObject({
        icon: 'information-o',
        variant: 'link',
      });
    });

    it('shows the popover', () => {
      createWrapper();
      expect(findPopover().props()).toMatchObject({
        title: ExplainVulnerabilityPrompt.i18n.popoverTitle,
        showCloseButton: '',
      });
      expect(findPopover().attributes('delay')).toBe('0');
      expect(findPopover().props('target')()).toBe(findInformationIcon().element);
    });

    it.each`
      phrase                      | promptWithCode   | checked      | disabled
      ${'checked and enabled'}    | ${'code prompt'} | ${'true'}    | ${undefined}
      ${'unchecked and disabled'} | ${''}            | ${undefined} | ${'true'}
    `(
      'is $phrase when prompt with code is "$promptWithCode"',
      async ({ promptWithCode, checked, disabled }) => {
        createWrapper({ mutationResponse: getMutationResponse({ promptWithCode }) });
        await waitForPromises();

        expect(findSendCodeCheckbox().attributes('checked')).toBe(checked);
        expect(findSendCodeCheckbox().attributes('disabled')).toBe(disabled);
      },
    );

    it('is disabled if the drawer is open', () => {
      createWrapper({ isDrawerOpen: true });

      expect(findSendCodeCheckbox().attributes('disabled')).toBe('true');
    });
  });

  describe('prompt is loading', () => {
    beforeEach(createWrapper);

    it('shows the skeleton loader', () => {
      expect(findLoadingBlock().findComponent(GlSkeletonLoader).exists()).toBe(true);
    });

    it('does not show anything else', () => {
      expect(findErrorAlert().exists()).toBe(false);
      expect(findPromptBlock().exists()).toBe(false);
    });
  });

  describe('prompt loading error', () => {
    beforeEach(async () => {
      createWrapper({ mutationResponse: jest.fn().mockRejectedValue() });
      await waitForPromises();
    });

    it('shows the error alert', () => {
      expect(findErrorAlert().exists()).toBe(true);
    });

    it('does not show anything else', () => {
      expect(findLoadingBlock().exists()).toBe(false);
      expect(findPromptBlock().exists()).toBe(false);
    });
  });

  describe('prompt loaded', () => {
    it.each`
      promptWithCode        | promptWithoutCode        | expectedPrompt
      ${'prompt with code'} | ${'prompt without code'} | ${'prompt with code'}
      ${''}                 | ${'prompt without code'} | ${'prompt without code'}
    `(
      'shows the expected prompt "$expectedPrompt"',
      async ({ promptWithCode, promptWithoutCode, expectedPrompt }) => {
        createWrapper({
          mutationResponse: getMutationResponse({ promptWithCode, promptWithoutCode }),
        });
        await waitForPromises();

        expect(findPromptBlock().text()).toBe(expectedPrompt);
      },
    );

    it.each`
      checked  | expectedPrompt
      ${true}  | ${'code'}
      ${false} | ${'no code'}
    `(
      'shows the prompt "$expectedPrompt" when the checkbox is $checked',
      async ({ checked, expectedPrompt }) => {
        createWrapper({
          mutationResponse: getMutationResponse({
            promptWithCode: 'code',
            promptWithoutCode: 'no code',
          }),
        });
        await waitForPromises();
        findSendCodeCheckbox().vm.$emit('input', checked);
        await nextTick();

        expect(findPromptBlock().text()).toBe(expectedPrompt);
      },
    );
  });
});
