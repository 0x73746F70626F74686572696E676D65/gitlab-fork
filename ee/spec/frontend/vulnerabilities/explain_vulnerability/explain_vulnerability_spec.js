import Vue from 'vue';
import VueApollo from 'vue-apollo';
import { GlLink, GlSprintf } from '@gitlab/ui';
import { shallowMountExtended } from 'helpers/vue_test_utils_helper';
import ExplainVulnerability from 'ee/vulnerabilities/components/explain_vulnerability/explain_vulnerability.vue';
import { helpCenterState } from '~/super_sidebar/constants';
import chatMutation from 'ee/ai/graphql/chat.mutation.graphql';
import createMockApollo from 'helpers/mock_apollo_helper';
import { MOCK_TANUKI_BOT_MUTATATION_RES } from 'ee_jest/ai/tanuki_bot/mock_data';

Vue.use(VueApollo);

const MOCK_VULNERABILITY_ID = 1;

describe('Explain Vulnerability component', () => {
  let wrapper;

  const chatMutationHandlerMock = jest.fn().mockResolvedValue(MOCK_TANUKI_BOT_MUTATATION_RES);

  const createWrapper = () => {
    const apolloProvider = createMockApollo([[chatMutation, chatMutationHandlerMock]]);

    wrapper = shallowMountExtended(ExplainVulnerability, {
      propsData: { vulnerabilityId: MOCK_VULNERABILITY_ID },
      stubs: {
        GlSprintf,
      },
      apolloProvider,
    });
  };

  const findExplainVulnerabilityButton = () => wrapper.findByTestId('explain-vulnerability-button');
  const findLink = () => wrapper.findComponent(GlLink);
  const findInfoIcon = () => wrapper.findByTestId('info-icon');
  const findAiIcon = () => wrapper.findByTestId('ai-icon');
  const clickExplainVulnerabilityButton = () => findExplainVulnerabilityButton().vm.$emit('click');

  beforeEach(createWrapper);

  it('shows the correct text', () => {
    expect(wrapper.text()).toMatchInterpolatedText(
      'You can also use AI by asking GitLab Duo Chat to explain this vulnerability and suggest a solution.',
    );
  });

  it('shows the "Explain vulnerability" button with the expected text and variant', () => {
    expect(findExplainVulnerabilityButton().text()).toBe(
      'use AI by asking GitLab Duo Chat to explain this vulnerability and suggest a solution',
    );
    expect(findExplainVulnerabilityButton().props('variant')).toBe('link');
  });

  it('shows the information link', () => {
    expect(findLink().attributes('href')).toBe(
      '/help/user/application_security/vulnerabilities/index.md#explaining-a-vulnerability',
    );
  });

  it('shows the information icon', () => {
    expect(findInfoIcon().props('name')).toBe('information-o');
  });

  it('shows the AI icon', () => {
    expect(findAiIcon().props('name')).toBe('tanuki-ai');
  });

  describe('when the "Explain vulnerability" button is clicked', () => {
    it('opens the global DuoChat drawer', () => {
      expect(helpCenterState.showTanukiBotChatDrawer).toBe(false);

      clickExplainVulnerabilityButton();

      expect(helpCenterState.showTanukiBotChatDrawer).toBe(true);
    });

    it('calls a custom chat mutation with the correct prompt and resource-id', () => {
      expect(chatMutationHandlerMock).not.toHaveBeenCalled();

      clickExplainVulnerabilityButton();

      expect(chatMutationHandlerMock).toHaveBeenCalledWith({
        question: '/vulnerability_explain',
        resourceId: `gid://gitlab/Vulnerability/${MOCK_VULNERABILITY_ID}`,
      });
    });
  });
});
