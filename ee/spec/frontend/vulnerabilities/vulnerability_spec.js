import Vue, { nextTick } from 'vue';
import VueApollo from 'vue-apollo';
import { GlTab, GlTabs } from '@gitlab/ui';
import VueRouter from 'vue-router';
import fetchHeaderVulnerabilityQuery from 'ee/security_dashboard/graphql/header_vulnerability.graphql';
import VulnerabilityFooter from 'ee/vulnerabilities/components/footer.vue';
import VulnerabilityHeader from 'ee/vulnerabilities/components/header.vue';
import Vulnerability from 'ee/vulnerabilities/components/vulnerability.vue';
import VulnerabilityDetails from 'ee/vulnerabilities/components/vulnerability_details.vue';
import VulnerabilityCodeFlow from 'ee/vulnerabilities/components/vulnerability_code_flow.vue';
import { stubComponent } from 'helpers/stub_component';
import createMockApollo from 'helpers/mock_apollo_helper';
import waitForPromises from 'helpers/wait_for_promises';
import { createAlert } from '~/alert';
import { VULNERABILITY_TAB_NAMES } from 'ee/vulnerabilities/constants';
import { shallowMountExtended } from 'helpers/vue_test_utils_helper';

Vue.use(VueApollo);
jest.mock('~/alert');

describe('Vulnerability', () => {
  let fetchHeaderVulnerabilityQuerySpy;
  let wrapper;
  const router = new VueRouter();

  const getVulnerability = (props) => ({
    id: 1,
    created_at: new Date().toISOString(),
    report_type: 'sast',
    state: 'detected',
    create_mr_url: '/create_mr_url',
    new_issue_url: '/new_issue_url',
    project_fingerprint: 'abc123',
    pipeline: {
      id: 2,
      created_at: new Date().toISOString(),
      url: 'pipeline_url',
      sourceBranch: 'main',
    },
    description: 'description',
    identifiers: 'identifiers',
    links: 'links',
    location: 'location',
    name: 'name',
    project: {
      full_path: '/project_full_path',
      full_name: 'Test Project',
    },
    discussions_url: '/discussion_url',
    notes_url: '/notes_url',
    can_modify_related_issues: false,
    related_issues_help_path: '/help_path',
    merge_request_feedback: null,
    issue_feedback: null,
    remediation: null,
    ...props,
  });

  const createApolloProvider = (...queries) => {
    return createMockApollo([...queries]);
  };

  const createApolloProviderForVulnerabilityStateChange = (mockFn = jest.fn()) => {
    fetchHeaderVulnerabilityQuerySpy = mockFn.mockResolvedValue({
      data: {
        errors: [],
        vulnerability: {
          id: 'gid://gitlab/Vulnerability/54',
          resolvedAt: '2020-09-16T11:13:26Z',
          state: 'RESOLVED',
        },
      },
    });

    return createApolloProvider([fetchHeaderVulnerabilityQuery, fetchHeaderVulnerabilityQuerySpy]);
  };

  const createWrapper = ({
    vulnData,
    apolloProvider,
    glFeatures: { vulnerabilityCodeFlow = false } = {},
  } = {}) => {
    wrapper = shallowMountExtended(Vulnerability, {
      apolloProvider,
      router,
      propsData: {
        initialVulnerability: { ...getVulnerability(), ...vulnData },
      },
      provide: {
        glFeatures: { vulnerabilityCodeFlow },
      },
      stubs: {
        VulnerabilityFooter: stubComponent(VulnerabilityFooter),
      },
    });
  };

  afterEach(() => {
    createAlert.mockReset();
  });

  const findHeader = () => wrapper.findComponent(VulnerabilityHeader);
  const findVulnerabilityDetails = () => wrapper.findComponent(VulnerabilityDetails);
  const findVulnerabilityCodeFlow = () => wrapper.findComponent(VulnerabilityCodeFlow);
  const findFooter = () => wrapper.findComponent(VulnerabilityFooter);
  const findTabs = () => wrapper.findComponent(GlTabs);
  const findAllTab = () => wrapper.findAllComponents(GlTab);
  const findTabAtIndex = (index) => findAllTab().at(index);
  const getById = (id) => wrapper.findByTestId(id);

  describe('default behavior', () => {
    beforeEach(() => {
      createWrapper({ apolloProvider: createApolloProviderForVulnerabilityStateChange() });
    });

    it('consists of header, details, and footer', () => {
      expect(findHeader().exists()).toBe(true);
      expect(getById('title').exists()).toBe(false);
      expect(findVulnerabilityDetails().exists()).toBe(true);
      expect(findFooter().exists()).toBe(true);
      expect(findTabs().exists()).toBe(false);
    });

    it('shows the title if it exists', () => {
      createWrapper({ vulnData: { title: 'some title' } });
      expect(getById('title').exists()).toBe(true);
      expect(getById('title').text()).toBe('some title');
    });

    it('passes the correct properties to the children', () => {
      const vulnerability = getVulnerability();
      expect(findHeader().props('vulnerability')).toEqual(vulnerability);
      expect(findVulnerabilityDetails().props('vulnerability')).toEqual(vulnerability);
      expect(findFooter().props('vulnerability')).toEqual(vulnerability);
    });
  });

  describe('vulnerability state change event', () => {
    let refreshVulnerability;

    beforeEach(() => {
      refreshVulnerability = jest.fn();
      createWrapper({
        apolloProvider: createApolloProviderForVulnerabilityStateChange(refreshVulnerability),
      });
    });

    it('re-fetches the query when the footer emitted a state-change', async () => {
      expect(refreshVulnerability).toHaveBeenCalledTimes(0);

      findFooter().vm.$emit('vulnerability-state-change');
      await waitForPromises();

      expect(refreshVulnerability).toHaveBeenCalledTimes(1);
    });

    it('passes the updated vulnerability to the footer when the header emitted a state-change', async () => {
      const updatedVulnerability = getVulnerability({ state: 'dismissed' });
      findHeader().vm.$emit('vulnerability-state-change', updatedVulnerability);
      await waitForPromises();

      expect(findFooter().props('vulnerability')).toEqual(updatedVulnerability);
    });
  });

  describe('refresh vulnerability', () => {
    describe('on failure', () => {
      beforeEach(() => {
        const apolloProvider = createApolloProvider([
          fetchHeaderVulnerabilityQuery,
          jest.fn().mockRejectedValue({
            data: {
              errors: [{ message: 'something went wrong while fetching the vulnerability' }],
              vulnerability: null,
            },
          }),
        ]);

        createWrapper({ apolloProvider });
      });

      it('calls createAlert', async () => {
        findFooter().vm.$emit('vulnerability-state-change');
        await waitForPromises();
        expect(createAlert).toHaveBeenCalledTimes(1);
      });
    });
  });

  describe('when `vulnerabilityCodeFlow` is enabled', () => {
    describe('when `details` object is not empty', () => {
      beforeEach(() => {
        createWrapper({
          vulnData: {
            details: {
              codeFlows: { name: 'code_flows' },
            },
          },
          glFeatures: {
            vulnerabilityCodeFlow: true,
          },
        });
      });
      describe.each`
        title                                | finderFn                     | index
        ${VULNERABILITY_TAB_NAMES.DETAILS}   | ${findVulnerabilityDetails}  | ${0}
        ${VULNERABILITY_TAB_NAMES.CODE_FLOW} | ${findVulnerabilityCodeFlow} | ${1}
      `('Tabs', ({ title, finderFn, index }) => {
        it(`renders tab with a title ${title} at index ${index}`, () => {
          expect(findTabAtIndex(index).attributes('title')).toBe(title);
        });

        it(`renders ${title} component`, () => {
          expect(finderFn().exists()).toBe(true);
        });

        it(`renders footer in ${title} component`, async () => {
          if (index !== 0) {
            await router.push({ query: { tab: title } });
            await nextTick();
            expect(router.currentRoute.query.tab).toBe(title);
            expect(getById('vulnerability-footer').exists()).toBe(false);
          } else {
            expect(findFooter().exists()).toBe(true);
          }
        });
      });
    });

    describe('when `details` object is empty', () => {
      it('checks code flow button functionality', () => {
        createWrapper({
          vulnData: { details: {} },
          glFeatures: {
            vulnerabilityCodeFlow: true,
          },
        });
        expect(findTabs().exists()).toBe(false);
      });
    });
  });

  describe('when `vulnerabilityCodeFlow` is disabled', () => {
    describe('when `details` object is not empty', () => {
      it('does not show the tabs', () => {
        createWrapper({
          vulnData: {
            details: {
              codeFlows: { name: 'code_flows' },
            },
          },
          vulnerabilityCodeFlow: false,
        });
        expect(findTabs().exists()).toBe(false);
      });
    });

    describe('when `details` object is empty', () => {
      it('does not show the tabs', () => {
        createWrapper({
          vulnData: { details: {} },
          vulnerabilityCodeFlow: false,
        });
        expect(findTabs().exists()).toBe(false);
      });
    });
  });
});
