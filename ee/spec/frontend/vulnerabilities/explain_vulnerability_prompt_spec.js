import VueApollo from 'vue-apollo';
import { GlAccordionItem, GlSkeletonLoader, GlAlert } from '@gitlab/ui';
import Vue, { nextTick } from 'vue';
import { shallowMountExtended } from 'helpers/vue_test_utils_helper';
import ExplainVulnerabilityPrompt from 'ee/vulnerabilities/components/explain_vulnerability_prompt.vue';
import explainVulnerabilityPromptQuery from 'ee/security_dashboard/graphql/queries/explain_vulnerability_prompt.query.graphql';
import createMockApollo from 'helpers/mock_apollo_helper';
import waitForPromises from 'helpers/wait_for_promises';

Vue.use(VueApollo);

describe('Explain Vulnerability Prompt component', () => {
  let wrapper;

  const getMutationResponse = ({ promptWithCode, promptWithoutCode } = {}) =>
    jest.fn().mockResolvedValue({
      data: {
        explainVulnerabilityPrompt: { promptWithCode, promptWithoutCode },
      },
    });

  const createWrapper = ({ mutationResponse = getMutationResponse() } = {}) => {
    wrapper = shallowMountExtended(ExplainVulnerabilityPrompt, {
      apolloProvider: createMockApollo([[explainVulnerabilityPromptQuery, mutationResponse]]),
      propsData: { vulnerabilityGraphqlId: 'gid://gitlab/Vulnerability/1' },
    });
  };

  const findAccordionItem = () => wrapper.findComponent(GlAccordionItem);
  const findLoadingBlock = () => wrapper.findByTestId('loading-block');
  const findErrorAlert = () => wrapper.findComponent(GlAlert);
  const findPromptBlock = () => wrapper.findByTestId('prompt-block');

  describe('clickable accordion item', () => {
    it('shows the "Show Prompt" clickable item', () => {
      createWrapper();

      expect(findAccordionItem().props('title')).toBe('Show prompt');
    });

    it('shows "Hide Prompt" when the prompt is visible', async () => {
      createWrapper();
      await waitForPromises();
      findAccordionItem().vm.$emit('input', true);
      await nextTick();

      expect(findAccordionItem().props('title')).toBe('Hide prompt');
    });
  });

  describe('prompt is loading', () => {
    beforeEach(createWrapper);

    it('shows the skeleton loader', () => {
      expect(findLoadingBlock().findComponent(GlSkeletonLoader).exists()).toBe(true);
    });

    it('does not show anything else', () => {
      expect(findErrorAlert().exists()).toBe(false);
      expect(findPromptBlock().exists()).toBe(false);
    });
  });

  describe('prompt loading error', () => {
    beforeEach(async () => {
      createWrapper({ mutationResponse: jest.fn().mockRejectedValue() });
      await waitForPromises();
    });

    it('shows the error alert', () => {
      expect(findErrorAlert().exists()).toBe(true);
    });

    it('does not show anything else', () => {
      expect(findLoadingBlock().exists()).toBe(false);
      expect(findPromptBlock().exists()).toBe(false);
    });
  });

  describe('prompt loaded', () => {
    it.each`
      promptWithCode        | promptWithoutCode        | expectedPrompt
      ${'prompt with code'} | ${'prompt without code'} | ${'prompt with code'}
      ${''}                 | ${'prompt without code'} | ${'prompt without code'}
    `(
      'shows the correct prompt with $promptWithCode, $promptWithoutCode',
      async ({ promptWithCode, promptWithoutCode, expectedPrompt }) => {
        createWrapper({
          mutationResponse: getMutationResponse({ promptWithCode, promptWithoutCode }),
        });
        await waitForPromises();

        expect(findPromptBlock().text()).toBe(expectedPrompt);
      },
    );
  });
});
