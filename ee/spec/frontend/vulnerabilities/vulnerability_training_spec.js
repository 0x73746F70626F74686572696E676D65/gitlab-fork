import VulnerabilityTraining, {
  i18n,
} from 'ee/vulnerabilities/components/vulnerability_training.vue';
import { shallowMountExtended } from 'helpers/vue_test_utils_helper';
import { SUPPORTED_REFERENCE_SCHEMA } from 'ee/vulnerabilities/constants';

const defaultProps = {
  identifiers: [{ externalType: SUPPORTED_REFERENCE_SCHEMA.cwe }, { externalType: 'cve' }],
};

describe('VulnerabilityTraining component', () => {
  let wrapper;

  const createComponent = (props = {}, { secureVulnerabilityTraining = true } = {}) => {
    wrapper = shallowMountExtended(VulnerabilityTraining, {
      propsData: {
        ...defaultProps,
        ...props,
      },
      provide: {
        glFeatures: {
          secureVulnerabilityTraining,
        },
      },
    });
  };

  afterEach(() => {
    wrapper.destroy();
  });

  const findTitle = () => wrapper.findByRole('heading', i18n.trainingTitle);
  const findDescription = () => wrapper.findByTestId('description');
  const findUnavailableMessage = () => wrapper.findByTestId('unavailable-message');

  describe('basic structure', () => {
    beforeEach(() => {
      createComponent();
    });

    it('displays the title', () => {
      expect(findTitle().text()).toBe(i18n.trainingTitle);
    });

    it('displays the description', () => {
      expect(findDescription().text()).toBe(i18n.trainingDescription);
    });

    it('does not render component when there are no identifiers', () => {
      createComponent({ identifiers: [] });
      expect(wrapper.html()).toBeFalsy();
    });
  });

  describe('training availability message', () => {
    it('displays the message', () => {
      createComponent({ identifiers: [{ externalType: 'not supported identifier' }] });
      expect(findUnavailableMessage().text()).toBe(i18n.trainingUnavailable);
    });

    it.each`
      identifiers                                                         | exists
      ${[{ externalType: 'cve' }]}                                        | ${true}
      ${[{ externalType: SUPPORTED_REFERENCE_SCHEMA.cwe.toUpperCase() }]} | ${false}
      ${[{ externalType: SUPPORTED_REFERENCE_SCHEMA.cwe.toLowerCase() }]} | ${false}
    `('sets it to "$exists" for "$identifiers"', ({ identifiers, exists }) => {
      createComponent({ identifiers });
      expect(findUnavailableMessage().exists()).toBe(exists);
    });
  });

  describe('when secureVulnerabilityTraining feature flag is disabled', () => {
    it('does not render the VulnerabilityTraining component', () => {
      createComponent({}, { secureVulnerabilityTraining: false });
      expect(wrapper.html()).toBeFalsy();
    });
  });
});
