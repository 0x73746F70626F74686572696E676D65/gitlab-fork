# frozen_string_literal: true

require 'spec_helper'

RSpec.shared_examples 'vulnerability and finding shared examples' do
  describe 'scopes' do
    describe '.for_projects' do
      subject { described_class.for_projects(*params) }

      let(:params) { [[project.id, archived_project.id], include_archived].compact }

      let_it_be(:vulnerability) { create(:vulnerability, :with_finding, project: project) }
      let_it_be(:archived_project) { create(:project, :archived) }

      let(:result_set_transformer) { transformer_method || :itself }
      let(:expected_all_projects) do
        (project.vulnerabilities + archived_project.vulnerabilities).map(&result_set_transformer)
      end

      let(:expected_excluding_archives) { project.vulnerabilities.map(&result_set_transformer) }

      let(:include_archived) { nil }
      let!(:archived_projects_vuln) { create(:vulnerability, :with_finding, project: archived_project) }

      before do
        # create a vulnerability associated on a project that will be
        # filtered out
        create(:vulnerability, :with_finding, project: create(:project))
      end

      it 'returns objects related to the given project IDs' do
        is_expected.to contain_exactly(*expected_excluding_archives)
      end

      context 'when including archived projects' do
        let(:include_archived) { true }

        it 'returns objects related to the given project IDs' do
          is_expected.to contain_exactly(*expected_all_projects)
        end
      end

      context 'when excluding archived projects' do
        let(:include_archived) { false }

        it 'returns objects related to the given project IDs' do
          is_expected.to contain_exactly(*expected_excluding_archives)
        end
      end
    end
  end
end
