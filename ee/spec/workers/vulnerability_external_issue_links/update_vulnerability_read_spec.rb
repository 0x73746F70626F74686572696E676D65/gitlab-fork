# frozen_string_literal: true

require 'spec_helper'

RSpec.describe VulnerabilityExternalIssueLinks::UpdateVulnerabilityRead, type: :worker, feature_category: :vulnerability_management do
  let_it_be(:vulnerability) { create(:vulnerability, :with_read) }
  let_it_be(:vulnerability_read) { vulnerability.vulnerability_read }

  context 'when handle_vulnerability_external_issue_link_via_events is enabled' do
    context "if a link was added" do
      let(:event) do
        Vulnerabilities::LinkToExternalIssueTrackerCreated.new(data: { vulnerability_id: vulnerability.id })
      end

      it_behaves_like 'subscribes to event'

      it 'updates the related Vulnerabilities::Read record' do
        expect(vulnerability_read.has_issues).to be_falsy

        consume_event(subscriber: described_class, event: event)

        expect(vulnerability_read.reload.has_issues).to be_truthy
      end
    end

    context "if a link was removed" do
      let_it_be(:existing_issue_link) do
        create(:vulnerabilities_external_issue_link, vulnerability: vulnerability, author: vulnerability.author)
      end

      let(:event) do
        Vulnerabilities::LinkToExternalIssueTrackerRemoved.new(data: { vulnerability_id: vulnerability.id })
      end

      before do
        vulnerability_read.update!(has_issues: true)
      end

      it_behaves_like 'subscribes to event'

      it 'updates the related Vulnerabilities::Read record' do
        expect(vulnerability_read.has_issues).to be_truthy

        consume_event(subscriber: described_class, event: event)

        expect(vulnerability_read.reload.has_issues).to be_falsy
      end
    end
  end

  context 'when handle_vulnerability_external_issue_link_via_events is disabled' do
    let(:event) do
      Vulnerabilities::LinkToExternalIssueTrackerCreated.new(data: { vulnerability_id: vulnerability.id })
    end

    before do
      stub_feature_flags(handle_vulnerability_external_issue_link_via_events: false)
    end

    it_behaves_like 'ignores the published event'
  end
end
