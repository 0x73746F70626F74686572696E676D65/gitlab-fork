# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Gitlab::Llm::Chain::Tools::ExplainVulnerability::Executor, feature_category: :duo_chat do
  let_it_be(:user) { build_stubbed(:user) }
  let_it_be(:resource) { create(:vulnerability, :with_findings) }

  let(:ai_request_double) { instance_double(Gitlab::Llm::Chain::Requests::Anthropic) }
  let(:command) { instance_double(Gitlab::Llm::Chain::SlashCommand) }
  let(:prompt_class) { Gitlab::Llm::Chain::Tools::ExplainVulnerability::Prompts::Anthropic }

  let(:context) do
    Gitlab::Llm::Chain::GitlabContext.new(
      current_user: user, container: nil, resource: resource, ai_request: ai_request_double
    )
  end

  subject(:tool) { described_class.new(context: context, options: {}) }

  describe '#name' do
    it 'returns tool name' do
      expect(described_class::NAME).to eq('ExplainVulnerability')
    end

    it 'returns resource name' do
      expect(described_class::RESOURCE_NAME).to eq('Vulnerability')
    end
  end

  describe '#execute' do
    context 'when context is authorized' do
      include_context 'with stubbed LLM authorizer', allowed: true

      before do
        allow(tool).to receive(:provider_prompt_class).and_return(prompt_class)
      end

      it 'calls prompt with correct params' do
        expect(prompt_class).to receive(:prompt).with(a_hash_including(
          language_info: 'The code is written in Java and stored as App.java',
          title: resource.title,
          identifiers: 'CVE-2018-1234'))

        tool.execute
      end

      it 'builds the expected prompt' do
        prompt = tool.prompt[:prompt]

        expect(prompt.length).to eq(2)

        expected_system_prompt = <<~PROMPT.chomp
          You are a software vulnerability developer.
          You can explain vulnerabilities in code.
          The code is written in Java and stored as App.java
        PROMPT

        expected_user_prompt = <<~PROMPT
          Explain the vulnerability "#{resource.title} - (CVE-2018-1234)".
          Provide a code example with syntax highlighting on how an attacker can take advantage of the vulnerability.
          Provide a code example with syntax highlighting on how to fix it.
          Provide the response in markdown format with headers.
        PROMPT

        expect(prompt[0][:role]).to eq(:system)
        expect(prompt[0][:content]).to eq(expected_system_prompt)

        expect(prompt[1][:role]).to eq(:user)
        expect(prompt[1][:content]).to eq(expected_user_prompt)
      end

      context 'when response is successful' do
        before do
          allow(tool).to receive(:request).and_return('successful response')
        end

        it 'returns success answer' do
          expect(tool.execute.content).to eq('successful response')
        end
      end

      context 'when error is raised during a request' do
        before do
          allow(tool).to receive(:request).and_raise(StandardError)
        end

        it 'returns an error answer' do
          expect(tool.execute.content).to eq('Unexpected error')
        end
      end

      context 'when the resource is not a vulnerability' do
        let_it_be(:resource) { user }

        it 'returns an error answer' do
          expect(tool.execute.content)
            .to eq(_('This command is used for explaining vulnerabilities and can only be invoked from ' \
              'a vulnerability detail page.'))
        end
      end

      context 'when the vulnerability is not a SAST vulnerability' do
        let_it_be(:resource) { create(:vulnerability, report_type: :secret_detection) }

        it 'returns an error answer' do
          expect(tool.execute.content)
            .to eq(_('Vulnerability explanation currently only supports vulnerabilities reported by SAST.'))
        end
      end

      context 'when the language is unknown' do
        before do
          allow(resource).to receive(:file).and_return('filename')
        end

        it 'uses empty language info' do
          expect(prompt_class).to receive(:prompt).with(a_hash_including(language_info: ''))

          tool.execute
        end

        it 'builds the expected system prompt' do
          expected_system_prompt = <<~PROMPT
            You are a software vulnerability developer.
            You can explain vulnerabilities in code.
          PROMPT

          expect(tool.prompt[:prompt][0][:content]).to eq(expected_system_prompt)
        end
      end

      context 'when feature flag is disabled' do
        before do
          stub_feature_flags(explain_vulnerability_tool: false)
        end

        it 'returns an error message' do
          expect(tool.execute.content).to eq(_('This feature is not enabled yet.'))
        end
      end
    end

    context 'when context is not authorized' do
      include_context 'with stubbed LLM authorizer', allowed: false

      it 'returns error answer' do
        expect(tool.execute.content)
          .to eq('I am sorry, I am unable to find what you are looking for.')
      end
    end

    context 'when code tool was already used' do
      before do
        context.tools_used << described_class
      end

      it 'returns already used answer' do
        expect(tool.execute.content)
          .to eq('You already have the answer from ExplainVulnerability tool, read carefully.')
      end
    end
  end
end
