# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Gitlab::VulnerabilityScanning::SecurityScanner, feature_category: :software_composition_analysis do
  describe '.find_or_create_for_project!' do
    let_it_be(:project) { create(:project) }

    context 'when the scanner does not exist' do
      it 'creates a new scanner with correct attributes and increases the count' do
        expect do
          scanner = described_class.find_or_create_for_project!(project)
          expect(scanner).to have_attributes(
            external_id: described_class::EXTERNAL_ID,
            name: described_class::NAME,
            vendor: described_class::VENDOR
          )
        end.to change { Vulnerabilities::Scanner.count }.by(1)
      end
    end

    context 'when the scanner already exists' do
      let!(:existing_scanner) do
        create(
          :vulnerabilities_scanner,
          external_id: Gitlab::VulnerabilityScanning::SecurityScanner::EXTERNAL_ID,
          project: project,
          name: "Old Name",
          vendor: "Old Vendor"
        )
      end

      it 'does not create a new scanner, returns the existing scanner, and updates it with new attributes' do
        expect do
          scanner = described_class.find_or_create_for_project!(project)
          expect(scanner.id).to eq(existing_scanner.id)
          expect(scanner.name).to eq(described_class::NAME)
          expect(scanner.vendor).to eq(described_class::VENDOR)
        end.not_to change { Vulnerabilities::Scanner.count }

        existing_scanner.reload
        expect(existing_scanner.name).to eq(described_class::NAME)
        expect(existing_scanner.vendor).to eq(described_class::VENDOR)
      end
    end
  end

  describe '.fabricate' do
    let(:scanner_instance) { described_class.fabricate }

    it 'returns a scanner with correct attributes' do
      expect(scanner_instance).to be_an_instance_of(Gitlab::Ci::Reports::Security::Scanner)
      expect(scanner_instance).to have_attributes(
        external_id: described_class::EXTERNAL_ID,
        name: described_class::NAME,
        vendor: described_class::VENDOR,
        version: described_class::VERSION
      )
    end
  end

  describe '#scanner' do
    let(:security_scanner) { described_class.new }
    let(:scanner_instance) { security_scanner.scanner }

    it 'returns a scanner with correct attributes' do
      expect(scanner_instance).to be_an_instance_of(Gitlab::Ci::Reports::Security::Scanner)
      expect(scanner_instance).to have_attributes(
        external_id: described_class::EXTERNAL_ID,
        name: described_class::NAME,
        vendor: described_class::VENDOR,
        version: described_class::VERSION
      )
    end
  end
end
