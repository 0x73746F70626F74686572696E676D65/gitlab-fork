# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Gitlab::VulnerabilityScanning::SecurityReportBuilder, feature_category: :software_composition_analysis do
  let(:sbom) { build(:ci_reports_sbom_report, source: sbom_source) }

  let_it_be(:ci_build) { build(:ci_build) }

  let(:expected) { Gitlab::Ci::Reports::Security::Report.new(report_type, ci_build.pipeline, created_at) }
  let(:created_at) { Time.zone.now }
  let(:json_report) { File.read(Rails.root.join(report_path)) }
  let(:attributes) do
    %i[
      report_type
      project_fingerprint
      compare_key
      uuid
      name
      description
      solution
      identifiers
      flags
      links
      location
      evidence
      severity
      confidence
      details
      signatures
    ]
  end

  subject(:builder) do
    described_class.new(report_type: report_type, project: ci_build.project, pipeline: ci_build.pipeline, sbom: sbom)
  end

  before do
    parser_class.parse!(json_report, expected, validate: true)
    builder.add_affections(cves.map { |cve| [cve, affected_component] })
  end

  describe "#report" do
    shared_examples_for 'it handles unsupported report types' do
      context "when report type is not supported" do
        let(:report_type) { "sast" }

        it "does not add any findings" do
          expect(builder.report.findings).to be_empty
        end
      end
    end

    context "for dependency scanning" do
      let(:report_type) { "dependency_scanning" }
      let(:parser_class) { Gitlab::Ci::Parsers::Security::DependencyScanning }
      let(:sbom_source) { build(:ci_reports_sbom_source, input_file_path: "go.mod", source_file_path: "go.mod") }
      let(:report_path) { 'ee/spec/fixtures/security_reports/simple/gl-dependency-scanning-report.json' }
      let_it_be(:affected_component) do
        build(:vs_possibly_affected_component, name: "github.com/minio/minio",
          version: "v0.0.0-20180419184637-5a16671f721f", purl_type: "golang")
      end

      let_it_be(:cves) do
        [
          build(:vs_advisory,
            xid: "051e7fdd-4e0a-4dfd-ba52-083ee235a580",
            title: "Allocation of File Descriptors or Handles Without Limits or Throttling",
            description: "Minio a Allocation of Memory Without Limits or Throttling vulnerability in write-to-RAM.",
            cvss_v2: "AV:N/AC:L/Au:N/C:N/I:N/A:P",
            cvss_v3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            identifiers: [
              build(:pm_identifier, type: "cve", name: "CVE-2018-1000538",
                url: "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000538", value: "CVE-2018-1000538")
            ],
            urls: ["https://github.com/minio/minio/pull/5957", "https://nvd.nist.gov/vuln/detail/CVE-2018-1000538"],
            solution: "Unfortunately, there is no solution available yet."
          ),
          build(:vs_advisory,
            xid: "216192fe-2efa-4c52-addd-4bf3522c2b69",
            title: "Improper Authentication",
            description: "MinIO versions before has an authentication bypass issue in the MinIO admin API. " \
                         "Given an admin access key, it is possible to perform admin API operations, i.e., " \
                         "creating new service accounts for existing access keys without knowing the admin secret key.",
            cvss_v2: "AV:N/AC:L/Au:N/C:N/I:P/A:N",
            cvss_v3: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            identifiers: [
              build(:pm_identifier, type: "cve", name: "CVE-2020-11012",
                url: "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-11012", value: "CVE-2020-11012")
            ],
            urls: ["https://nvd.nist.gov/vuln/detail/CVE-2020-11012"],
            solution: "Upgrade to version RELEASE.2020-04-23T00-58-49Z or above."
          )
        ]
      end

      context "when components are vulnerable" do
        it "builds a valid report" do
          expect(builder.report.errored?).to eq(false)
          expect(builder.report.warnings?).to eq(false)
        end

        it "adds correct findings" do
          convert_to_hash = ->(finding) { finding.to_hash.slice(*attributes) }
          findings = builder.report.findings.map(&convert_to_hash)
          expected_findings = expected.findings.map(&convert_to_hash)

          expect(findings).to match_array(expected_findings)
        end

        it "adds correct identifiers" do
          expect(builder.report.identifiers).to match_array(expected.identifiers)
        end

        it "does not produce or remove findings when compared against analyzer report" do
          comparer = Gitlab::Ci::Reports::Security::VulnerabilityReportsComparer.new(ci_build.project, expected,
            builder.report)
          expect(comparer.added).to be_empty
          expect(comparer.fixed).to be_empty
        end
      end

      context "when supplied cylonedx is incompatible" do
        let(:sbom_source) { build(:ci_reports_sbom_source, data: {}) }

        it "adds an error to the report" do
          expect(builder.report.errored?).to eq(true)
          expect(builder.report.errors).to match_array([
            { type: "MissingPropertiesError",
              message: "Missing required gitlab:dependency_scanning CycloneDX properties" },
            { type: "MissingPropertiesError",
              message: "Missing required gitlab:dependency_scanning CycloneDX properties" }
          ])
        end
      end

      it_behaves_like 'it handles unsupported report types'
    end

    context "for container scanning" do
      let_it_be(:cves) do
        [
          build(:vs_advisory,
            xid: "df6969bdb23ce636df334f8f6d5fe631e58f75c4dc33ec0a4466d4af8e58c9d6",
            title: "CVE-2017-18269 in registry.gitlab.com/gitlab-org/security-products/dast/webgoat-8.0@sha256:glibc",
            description: "An SSE2-optimized memmove implementation for i386 in " \
                         "sysdeps/i386/i686/multiarch/memcpy-sse2-unaligned.S in the GNU C Library (aka glibc or " \
                         "libc6) 2.21 through 2.27 does not correctly perform the overlapping memory check if the " \
                         "source memory range spans the middle of the address space, resulting in corrupt data " \
                         "being produced by the copy operation. This may disclose information to context-dependent " \
                         "attackers, or result in a denial of service, or, possibly, code execution.",
            cvss_v2: "AV:N/AC:L/Au:N/C:N/I:N/A:P",
            cvss_v3: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            identifiers: [
              build(:pm_identifier, type: "cve", name: "CVE-2017-18269",
                url: "https://security-tracker.debian.org/tracker/CVE-2017-18269", value: "CVE-2017-18269")
            ],
            urls: ["https://security-tracker.debian.org/tracker/CVE-2017-18269"],
            solution: "Upgrade glibc from 2.24-11+deb9u3 to 2.24-11+deb9u4"
          )
        ]
      end

      let(:report_type) { "container_scanning" }
      let(:sbom_source) do
        build(:ci_reports_sbom_source, :container_scanning,
          image_name: "registry.gitlab.com/gitlab-org/security-products/dast/webgoat-8.0@sha256",
          image_tag: "bc09fe2e0721dfaeee79364115aeedf2174cce0947b9ae5fe7c33312ee019a4e",
          operating_system_name: "debian",
          operating_system_version: "9")
      end

      let(:parser_class) { Gitlab::Ci::Parsers::Security::ContainerScanning }
      let(:report_path) { 'ee/spec/fixtures/security_reports/simple/gl-container-scanning-report.json' }

      let_it_be(:affected_component) do
        build(:vs_possibly_affected_component, :container_scanning, name: "glibc",
          version: "2.24-11+deb9u3", purl_type: "deb")
      end

      context "when components are vulnerable" do
        it "builds a valid report" do
          expect(builder.report.errored?).to eq(false)
          expect(builder.report.warnings?).to eq(false)
        end

        it "adds correct findings" do
          convert_to_hash = ->(finding) { finding.to_hash.slice(*attributes) }
          findings = builder.report.findings.map(&convert_to_hash)
          expected_findings = expected.findings.map(&convert_to_hash)

          expect(findings).to match_array(expected_findings)
        end

        it "adds correct identifiers" do
          expect(builder.report.identifiers).to match_array(expected.identifiers)
        end

        it "does not produce or remove findings when compared against analyzer report" do
          comparer = Gitlab::Ci::Reports::Security::VulnerabilityReportsComparer.new(ci_build.project, expected,
            builder.report)
          expect(comparer.added).to be_empty
          expect(comparer.fixed).to be_empty
        end
      end

      context "when supplied cylonedx is incompatible" do
        let(:sbom_source) { build(:ci_reports_sbom_source, data: {}) }

        it "adds an error to the report" do
          expect(builder.report.errored?).to eq(true)
          expect(builder.report.errors).to match_array([
            { type: "MissingPropertiesError",
              message: "Missing required gitlab:container_scanning CycloneDX properties" }
          ])
        end
      end

      it_behaves_like 'it handles unsupported report types'
    end
  end
end
