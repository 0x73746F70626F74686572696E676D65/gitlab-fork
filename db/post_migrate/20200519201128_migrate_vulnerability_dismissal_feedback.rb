# frozen_string_literal: true

# See https://docs.gitlab.com/ee/development/migration_style_guide.html
# for more information on how to write migrations for GitLab.

class MigrateVulnerabilityDismissalFeedback < ActiveRecord::Migration[6.0]
  # Uncomment the following include if you require helper functions:
  include Gitlab::Database::MigrationHelpers

  # Set this constant to true if this migration requires downtime.
  DOWNTIME = false

  # When a migration requires downtime you **must** uncomment the following
  # constant and define a short and easy to understand explanation as to why the
  # migration requires downtime.
  # DOWNTIME_REASON = ''

  # When using the methods "add_concurrent_index", "remove_concurrent_index" or
  # "add_column_with_default" you must disable the use of transactions
  # as these methods can not run in an existing transaction.
  # When using "add_concurrent_index" or "remove_concurrent_index" methods make sure
  # that either of them is the _only_ method called in the migration,
  # any other changes should go in a separate migration.
  # This ensures that upon failure _only_ the index creation or removing fails
  # and can be retried or reverted easily.
  #
  # To disable transactions uncomment the following line and remove these
  # comments:
  disable_ddl_transaction!

  MIGRATION = 'UpdateVulnerabilitiesFromDismissalFeedback'.freeze
  BATCH_SIZE = 500
  DELAY_INTERVAL = 2.minutes.to_i

  class Vulnerability < ActiveRecord::Base
    self.table_name = 'vulnerabilities'
    self.inheritance_column = :_type_disabled

    include ::EachBatch
  end

  def up
    return unless Gitlab.ee?

    Vulnerability.select('project_id').group(:project_id).each_batch(of: BATCH_SIZE, column: "project_id") do |project_batch, index|
      batch_delay = (index - 1) * BATCH_SIZE * DELAY_INTERVAL

      project_batch.each_with_index do |project, project_batch_index|
        project_delay = project_batch_index * DELAY_INTERVAL
        migrate_in(batch_delay + project_delay, MIGRATION, project[:project_id])
      end
    end
  end

  def down
    # nothing to do
  end
end
