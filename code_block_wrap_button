<script>
import {
  GlDropdown,
  GlButton,
  GlDropdownItem,
} from '@gitlab/ui';
import { NodeViewWrapper, nodeViewProps } from '@tiptap/vue-2';

export default {
  components: {
    NodeViewWrapper,
    nodeViewProps,
    GlDropdown,
    GlDropdownItem,
    GlButton,
  },

  props: {
    text: {
      type: String,
      required: true,
    },
    gfm: {
      type: String,
      required: false,
      default: null,
    },
    title: {
      type: String,
      required: true,
    },
    tooltipPlacement: {
      type: String,
      required: false,
      default: 'top',
    },
    tooltipContainer: {
      type: [String, Boolean],
      required: false,
      default: false,
    },
    tooltipBoundary: {
      type: String,
      required: false,
      default: null,
    },
    cssClass: {
      type: String,
      required: false,
      default: null,
    },
    category: {
      type: String,
      required: false,
      default: 'secondary',
    },
    size: {
      type: String,
      required: false,
      default: 'medium',
    },
    variant: {
      type: String,
      required: false,
      default: 'default',
    },
  },

  data() {
    return {
      isWrapped: false,
    };
  },


  computed: {

    get_text() {//I tried to copy text to wrap or unwrap
      return this.node.attrs.element.getHTML;
    },
    set_text_wrap() {//I tried to emit text to html
      let text = get_text();
      this.node.attrs.element.commands.setContent(`<textarea wrap="hard"> >{{text}}</textarea>`)

    },
    set_text_unwrap() {//I tried to emit text to html
      let text = get_text();
      this.node.attrs.element.commands.setContent(`<textarea > >{{text}}</textarea>`)

    },

    /*copyText() {///I tried to copy text to wrap or unwrap
      if (this.gfm !== null) {
        return JSON.stringify({text: this.text, gfm: this.gfm});
      }
      return this.text;
    },*/

    /*onUpdate: () => {//I tried to emit text to html
      this.$emit(
        "input",
        this.editor.getHTML()
      );
    },*/

  },

  methods: {

    change_wrap() { // if current state wrapped unwrap or vice-versa
      if (isWrapped ){
        this.updateAttributes({
          isWrapped: false,
        })
        wrap();
      }
      else{
        this.updateAttributes({
          isWrapped: true,
        })
        unwrap();
      }
    },

    wrap(){
      set_text_wrap();
    },

    unwrap(){
      set_text_unwrap();
    },
  }
}
</script>

<template>
  <node-view-wrapper class="gl-display-inline-block">
    <div class="gl-h-11">
      <gl-dropdown
        text="More actions"
        textSrOnly
        :category="category"
        :variant="variant"
        :size="size"
        icon="ellipsis_v"
        :variant="variant"
        :block="false"
        :disabled="false"
        no-caret=""
      >
        <gl-dropdown-item>
          <gl-button
            v-if="isWrapped == 'true'"
            :category="category"
            :variant="variant"
            :size="size"
            :selected="false"
            :loading="false"
            :disabled="false"
            :data-text="copyText"
            block
            @click="change_wrap"

          >
            Soft Wrap
          </gl-button>
          <gl-button
            v-if="isWrapped == 'false'"
            :category="category"
            :variant="variant"
            :size="size"
            :selected="false"
            :loading="false"
            :disabled="false"
            :data-text="copyText"
            block
            @click="change_wrap"
          >
            No Wrap
          </gl-button>

        </gl-dropdown-item>
      </gl-dropdown>
    </div>
  </node-view-wrapper>
</template>
