# frozen_string_literal: true

module QA
  module EE
    module Page
      module Project
        module Secure
          class VulnerabilityDetails < QA::Page::Base
            view 'ee/app/assets/javascripts/vulnerabilities/components/header.vue' do
              element 'vulnerability-header'
            end

            view 'ee/app/assets/javascripts/vulnerabilities/components/vulnerability.vue' do
              element 'title'
            end

            view 'ee/app/assets/javascripts/vulnerabilities/components/vulnerability_details.vue' do
              element 'vulnerability-details'
              element 'description'
            end

            view 'ee/app/assets/javascripts/vulnerabilities/components/detail_item.vue' do
              element 'url', ':data-testid="valueName"' # rubocop:disable QA/ElementWithPattern -- dynamic testid attribute
              element 'value'
            end

            view 'ee/app/assets/javascripts/vulnerabilities/components/footer.vue' do
              element 'vulnerability-footer'
            end

            view 'ee/app/assets/javascripts/vulnerabilities/components/related_issues.vue' do
              element 'create-issue-button'
            end

            view 'ee/app/assets/javascripts/vulnerabilities/components/false_positive_alert.vue' do
              element 'false-positive-alert'
            end

            view 'ee/app/assets/javascripts/vulnerabilities/components/vulnerability_state_dropdown.vue' do
              element 'vulnerability-status-dropdown'
            end

            view 'ee/app/assets/javascripts/vulnerabilities/components/related_jira_issues.vue' do
              element 'jira-issue-link'
            end

            view 'ee/app/assets/javascripts/vue_shared/security_reports/components/create_jira_issue.vue' do
              element 'create-new-jira-issue'
            end

            view 'ee/app/assets/javascripts/vulnerabilities/components/vulnerability_training.vue' do
              element 'security-training-text'
              element 'security-training-link'
            end

            view 'ee/app/assets/javascripts/vulnerabilities/components/explain_vulnerability' \
                 '/explain_vulnerability_deprecated.vue' do
              element 'explain-vulnerability-button'
            end

            view 'ee/app/assets/javascripts/vulnerabilities/components/' \
                 'explain_vulnerability/explain_vulnerability_drawer.vue' do
              element 'markdown'
            end

            def has_component?(component_name:)
              has_element?(component_name)
            end

            def has_vulnerability_title?(title:)
              has_element?('title', text: title)
            end

            def has_url?(url:)
              within_element('url') do
                has_element?('value', text: url)
              end
            end

            def security_training_present?(training_name:)
              has_element?('security-training-text', text: training_name, wait: 60)
            end

            def training_link_present?(training_name:, url:)
              element = find_element('security-training-link', training_name: training_name, wait: 20)
              element["href"].include?(url)
            end

            def has_explain_this_vulnerability?
              has_element?('markdown')
            end

            def explain_this_vulnerability_text
              find_element('markdown').text
            end

            def has_vulnerability_description?(description:)
              has_element?('description', text: description)
            end

            def click_create_issue_button
              click_element('create-issue-button')
            end

            def click_create_jira_issue_button
              click_element('create-new-jira-issue')
            end

            def change_status(status)
              click_element('vulnerability-status-dropdown')

              if status == 'dismissed'
                choose_dismissal_reason
              else
                click_element("listbox-item-#{status}")
              end
            end

            def choose_dismissal_reason
              reasons = %w[acceptable_risk false_positive mitigating_control used_in_tests not_applicable]

              click_element("listbox-item-#{reasons.sample}")
            end

            def training_header_present?
              has_css?('h3', text: 'Training')
            end

            def explain_this_vulnerability
              click_element('explain-vulnerability-button')
              wait_for_requests
            end

            def has_vulnerability_status?(status)
              has_element?('vulnerability-status-dropdown', text: status.capitalize.to_s)
            end

            def jira_issue_link_present?(issue_text, jira_issue_url)
              element = find_element('jira-issue-link')
              element.text == issue_text && element["href"].include?(jira_issue_url)
            end
          end
        end
      end
    end
  end
end
